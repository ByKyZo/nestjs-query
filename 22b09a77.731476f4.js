(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{119:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return l}));var r=n(1),a=(n(0),n(223));const o={title:"Federation"},i={id:"graphql/federation",title:"Federation",description:"`nestjs-query` provides **basic** federation support, with the intention of helping to",source:"@site/docs/graphql/federation.mdx",permalink:"/nestjs-query/docs/graphql/federation",editUrl:"https://github.com/doug-martin/nestjs-query/edit/master/documentation/docs/graphql/federation.mdx",sidebar:"docs",previous:{title:"Types",permalink:"/nestjs-query/docs/graphql/types"},next:{title:"v0.5.x to v0.6.x",permalink:"/nestjs-query/docs/migration-guides/v0.5.x-to-v0.6.x"}},s=[{value:"References",id:"references",children:[{value:"References in Resolvers",id:"references-in-resolvers",children:[]}]},{value:"Federated Relations",id:"federated-relations",children:[{value:"RelationQueryService",id:"relationqueryservice",children:[]},{value:"FederationResolver",id:"federationresolver",children:[]}]},{value:"Complete Example",id:"complete-example",children:[]}],c={rightToc:s};function l({components:e,...t}){return Object(a.b)("wrapper",Object(r.a)({},c,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"nestjs-query")," provides ",Object(a.b)("strong",{parentName:"p"},"basic")," federation support, with the intention of helping to"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Plug into existing federated graphs, through references."),Object(a.b)("li",{parentName:"ul"},"Create a federated relations/connections on types defined in other services.")),Object(a.b)("p",null,"These docs assume you have read"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://docs.nestjs.com/graphql/federation"}),"https://docs.nestjs.com/graphql/federation")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.apollographql.com/docs/apollo-server/federation/introduction/"}),"https://www.apollographql.com/docs/apollo-server/federation/introduction/"))),Object(a.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(a.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"These examples use ",Object(a.b)("inlineCode",{parentName:"p"},"@nestjs-query/query-typeorm")," the same concepts apply for ",Object(a.b)("inlineCode",{parentName:"p"},"@nestjs-query/query-sequelize")))),Object(a.b)("h2",{id:"references"},"References"),Object(a.b)("p",null,"The simplest way to integrate with a federated graph is through references."),Object(a.b)("p",null,"A reference is an object that looks like"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"{ __typename: 'TodoItem', id: subTask.todoItemId }\n")),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"__typename")," lets the gateway know which type is being referenced with additional fields that can be used to uniquely identify the type."),Object(a.b)("h3",{id:"references-in-resolvers"},"References in Resolvers"),Object(a.b)("p",null,"To reference a type in ",Object(a.b)("inlineCode",{parentName:"p"},"nestjs-query")," you must first create a federated service that defines the base type."),Object(a.b)("h4",{id:"base-type"},"Base Type"),Object(a.b)("p",null,"The base type in its own service must be decorated with federated directives specifying its key."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="dto/todo-item.dto.ts"',title:'"dto/todo-item.dto.ts"'}),"import { FilterableField } from '@nestjs-query/query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Directive } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\n@Directive('@key(fields: \"id\")')\nexport class TodoItemDTO {\n  @FilterableField(() => ID)\n  id!: number;\n  ...\n}\n")),Object(a.b)("p",null,"In the service that declares this base type, the base type resolver must have a ",Object(a.b)("inlineCode",{parentName:"p"},"resolveReference")," function that tells the gateway how to resolve the base type."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'}),"@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  CreateDTOClass: TodoItemInputDTO,\n  UpdateDTOClass: TodoItemUpdateDTO,\n}) {\n  constructor(@InjectTypeOrmQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>) {\n    super(service);\n  }\n\n  @ResolveReference()\n  resolveReference(reference: { __typename: string; id: string }): Promise<TodoItemDTO> {\n    return this.service.getById(reference.id);\n  }\n}\n")),Object(a.b)("p",null,"To read more about the ",Object(a.b)("inlineCode",{parentName:"p"},"resolveReference")," function see ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.apollographql.com/docs/apollo-server/federation/entities/#resolving"}),"https://www.apollographql.com/docs/apollo-server/federation/entities/#resolving")),Object(a.b)("p",null,"This service must also use the ",Object(a.b)("inlineCode",{parentName:"p"},"GraphQLFederationModule")," in order for the base type to be resolved by the gateway."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="app.module.ts"',title:'"app.module.ts"'}),"import { GraphQLFederationModule } from '@nestjs/graphql';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(ormconfig as TypeOrmModuleOptions),\n    GraphQLFederationModule.forRoot({\n      autoSchemaFile: 'schema.gql',\n      include: [TodoItemModule],\n    }),\n    TodoItemModule,\n  ],\n})\nexport class AppModule {}\n")),Object(a.b)("h4",{id:"extended-type"},"Extended Type"),Object(a.b)("p",null,"In a separate service from the one defining the base type above, we can use Apollo Federation to extend that base type."),Object(a.b)("p",null,"To do this with ",Object(a.b)("inlineCode",{parentName:"p"},"nestjs-query")," you must create a type that extends the base type contained in some other graphql service."),Object(a.b)("div",{className:"admonition admonition-warning alert alert--danger"},Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(a.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"warning")),Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"The type name must be the same name as the type it extends in the graph."))),Object(a.b)("p",null,"For example"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="dto/todo-item-reference.dto.ts"',title:'"dto/todo-item-reference.dto.ts"'}),"import { ObjectType, Directive, Field, ID } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\n@Directive('@extends')\n@Directive('@key(fields: \"id\")')\nexport class TodoItemReferenceDTO {\n  @Field(() => ID)\n  @Directive('@external')\n  id!: number;\n}\n\n")),Object(a.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(a.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"Notice how the ",Object(a.b)("inlineCode",{parentName:"p"},"@Directive")," decorator is used to add the ",Object(a.b)("inlineCode",{parentName:"p"},"@extends")," annotation along with the ",Object(a.b)("inlineCode",{parentName:"p"},"@keys"),"."),Object(a.b)("p",{parentName:"div"},"To read more about ",Object(a.b)("inlineCode",{parentName:"p"},"@extends")," annotation see ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.apollographql.com/docs/apollo-server/federation/entities/#extending"}),"https://www.apollographql.com/docs/apollo-server/federation/entities/#extending")))),Object(a.b)("p",null,"Let also create a new ",Object(a.b)("inlineCode",{parentName:"p"},"SubTaskDTO")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="dto/sub-task.dto.ts"',title:'"dto/sub-task.dto.ts"'}),"import { FilterableField } from '@nestjs-query/query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\n\n@ObjectType('SubTask')\nexport class SubTaskDTO {\n  @FilterableField(() => ID)\n  id!: number;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField({ nullable: true })\n  description?: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n\n  @FilterableField()\n  todoItemId!: string;\n}\n")),Object(a.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(a.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"We're not going to worry about the persistence in these examples. Below it is assumed that we're using typeorm and the entity has already been defined."))),Object(a.b)("p",null,"Now that we have created the extending type it can be used in a resolver as a reference."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="sub-task.resolver.ts"',title:'"sub-task.resolver.ts"'}),"import { QueryService } from '@nestjs-query/core';\nimport { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { InjectTypeOrmQueryService } from '@nestjs-query/query-typeorm';\nimport { SubTaskDTO } from './dto/sub-task.dto';\nimport { TodoItemReferenceDTO } from './dto/todo-item-reference.dto';\nimport { SubTaskEntity } from './sub-task.entity';\n\n@Resolver(() => SubTaskDTO)\nexport class SubTaskResolver extends CRUDResolver(SubTaskDTO, {\n  references: {\n    todoItem: { DTO: TodoItemReferenceDTO, keys: { id: 'todoItemId' } },\n  },\n}) {\n  constructor(@InjectTypeOrmQueryService(SubTaskEntity) readonly service: QueryService<SubTaskEntity>) {\n    super(service);\n  }\n}\n")),Object(a.b)("p",null,"This pattern here should be familiar to a normal ",Object(a.b)("inlineCode",{parentName:"p"},"CRUDResolver"),", the main difference is the use of the ",Object(a.b)("inlineCode",{parentName:"p"},"references")," option."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"references: {\n  todoItem: { DTO: TodoItemDTO, keys: { id: 'todoItemId' } },\n},\n")),Object(a.b)("p",null,"Using the ",Object(a.b)("inlineCode",{parentName:"p"},"references")," option lets ",Object(a.b)("inlineCode",{parentName:"p"},"nestjs-query")," know to ",Object(a.b)("strong",{parentName:"p"},"not")," look up the relation locally instead to return a reference which will be resolved through another graphql service."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"references.keys")," property tells ",Object(a.b)("inlineCode",{parentName:"p"},"nestjs-query")," how to map fields to uniquely identify the type. In this case we use"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"{ id: 'todoItemId' }\n")),Object(a.b)("p",null,"Which will map the ",Object(a.b)("inlineCode",{parentName:"p"},"SubTask.todoItemId")," to the ",Object(a.b)("inlineCode",{parentName:"p"},"id")," field in the reference type."),Object(a.b)("p",null,"Assuming you have the following ",Object(a.b)("inlineCode",{parentName:"p"},"SubTask")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"{id: 1, title: 'Sub Task 1', completed: false, todoItemId: 2}\n")),Object(a.b)("p",null,"The reference type would be"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"{ __typename: 'TodoItem', id: 2 }\n")),Object(a.b)("h2",{id:"federated-relations"},"Federated Relations"),Object(a.b)("p",null,"Another common use case is to add ",Object(a.b)("inlineCode",{parentName:"p"},"relations")," to a federated type from another service."),Object(a.b)("p",null,"Lets continue with the ",Object(a.b)("inlineCode",{parentName:"p"},"SubTask")," example used above. We have add a ",Object(a.b)("inlineCode",{parentName:"p"},"todoItem")," reference to the ",Object(a.b)("inlineCode",{parentName:"p"},"SubTask")," but now lets add subTasks to the ",Object(a.b)("inlineCode",{parentName:"p"},"TodoItem"),"."),Object(a.b)("h3",{id:"relationqueryservice"},"RelationQueryService"),Object(a.b)("p",null,"The first step is to create a ",Object(a.b)("inlineCode",{parentName:"p"},"RelationQueryService"),". The ",Object(a.b)("inlineCode",{parentName:"p"},"RelationQueryService")," is a special type of ",Object(a.b)("inlineCode",{parentName:"p"},"QueryService")," that allows looking up relations without defining them in your entity."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.service.ts"',title:'"todo-item.service.ts"'}),"import { QueryService, RelationQueryService } from '@nestjs-query/core';\nimport { InjectTypeOrmQueryService } from '@nestjs-query/query-typeorm';\nimport { TodoItemReferenceDTO } from './dto/todo-item-reference.dto';\nimport { SubTaskEntity } from './sub-task.entity';\n\n@QueryService(TodoItemReferenceDTO)\nexport class TodoItemService extends RelationQueryService<TodoItemReferenceDTO> {\n  constructor(@InjectTypeOrmQueryService(SubTaskEntity) readonly subTaskService: QueryService<SubTaskEntity>) {\n    super({\n      // the name of the relation\n      subTasks: {\n        service: subTaskService,\n        // a query factory that will take in the reference to create a query.\n        query: (todoItemReferenceDTO) => ({ filter: { todoItemId: { eq: todoItemReferenceDTO.id } } }),\n      },\n    });\n  }\n}\n\n")),Object(a.b)("p",null,"In this example we inject a ",Object(a.b)("inlineCode",{parentName:"p"},"SubTask")," service that will be used to look up ",Object(a.b)("inlineCode",{parentName:"p"},"subTask")," relations. The ",Object(a.b)("inlineCode",{parentName:"p"},"query")," method is used to filter relations when ",Object(a.b)("inlineCode",{parentName:"p"},"findRelation")," or ",Object(a.b)("inlineCode",{parentName:"p"},"queryRelations")," is called."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"{\n  // the name of the relation\n  subTasks: {\n    // the service to delegate to when looking up the relations\n    service: subTaskService,\n    // a query factory that will take in the reference to create a query.\n    query: (todoItemReferenceDTO) => ({ filter: { todoItemId: { eq: todoItemReferenceDTO.id } } }),\n  },\n}\n")),Object(a.b)("h3",{id:"federationresolver"},"FederationResolver"),Object(a.b)("p",null,"Next we set up our resolver that exposes the relations in the schema."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'}),"import { FederationResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { SubTaskDTO } from './dto/sub-task.dto';\nimport { TodoItemReferenceDTO } from './dto/todo-item-reference.dto';\nimport { TodoItemService } from './todo-item.service';\n\n@Resolver(() => TodoItemReferenceDTO)\nexport class TodoItemResolver extends FederationResolver(TodoItemReferenceDTO, {\n  many: {\n    subTasks: { DTO: SubTaskDTO },\n  },\n}) {\n  constructor(readonly service: TodoItemService) {\n    super(service);\n  }\n}\n")),Object(a.b)("p",null,"In the above example we extend ",Object(a.b)("inlineCode",{parentName:"p"},"FederationResolver")," this will not set up any queries or mutations in the graph. Instead, it is used set up the reading of relations for a type that originates from another service."),Object(a.b)("p",null,"The final step is to register your module just like normal"),Object(a.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(a.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"  Make sure you are importing the ",Object(a.b)("inlineCode",{parentName:"p"},"GraphQLFederatedModule")," in the root of every service included in your federated graph."))),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { NestjsQueryTypeOrmModule } from '@nestjs-query/query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { SubTaskEntity } from './sub-task.entity';\nimport { SubTaskResolver } from './sub-task.resolver';\nimport { TodoItemResolver } from './todo-item.resolver';\nimport { TodoItemService } from './todo-item.service';\n\n@Module({\n  providers: [SubTaskResolver, TodoItemResolver, TodoItemService],\n  imports: [NestjsQueryTypeOrmModule.forFeature([SubTaskEntity])],\n})\nexport class SubTaskModule {}\n\n")),Object(a.b)("h2",{id:"complete-example"},"Complete Example"),Object(a.b)("p",null,"To see a complete example checkout ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/doug-martin/nestjs-query/tree/master/examples/federation"}),"https://github.com/doug-martin/nestjs-query/tree/master/examples/federation")))}l.isMDXComponent=!0},223:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},d=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,u=d["".concat(i,".").concat(m)]||d[m]||b[m]||o;return n?a.a.createElement(u,s({ref:t},l,{components:n})):a.a.createElement(u,s({ref:t},l))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);