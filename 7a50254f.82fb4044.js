(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{114:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return d}));var a=n(2),i=(n(0),n(190));const r={title:"DTOs"},l={unversionedId:"graphql/dtos",id:"graphql/dtos",isDocsHomePage:!1,title:"DTOs",description:"The query-graphql package leverages most decorators from @nestjs/graphql and TypeGraphQL, with the exception of FilterableField.",source:"@site/docs/graphql/dtos.md",slug:"/graphql/dtos",permalink:"/nestjs-query/docs/graphql/dtos",editUrl:"https://github.com/doug-martin/nestjs-query/edit/master/documentation/docs/graphql/dtos.md",version:"current",sidebar:"docs",previous:{title:"Getting Started",permalink:"/nestjs-query/docs/graphql/getting-started"},next:{title:"Resolvers",permalink:"/nestjs-query/docs/graphql/resolvers"}},o=[{value:"<code>@FilterableField</code>",id:"filterablefield",children:[{value:"Options",id:"options",children:[]},{value:"Example",id:"example",children:[]},{value:"Example - allowedComparisons",id:"example---allowedcomparisons",children:[]},{value:"Example - filterRequired",id:"example---filterrequired",children:[]}]}],p={rightToc:o};function d({components:e,...t}){return Object(i.b)("wrapper",Object(a.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"query-graphql")," package leverages most decorators from ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.nestjs.com/graphql/quick-start"}),Object(i.b)("inlineCode",{parentName:"a"},"@nestjs/graphql"))," and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://typegraphql.ml"}),"TypeGraphQL"),", with the exception of ",Object(i.b)("inlineCode",{parentName:"p"},"FilterableField"),"."),Object(i.b)("h2",{id:"filterablefield"},Object(i.b)("inlineCode",{parentName:"h2"},"@FilterableField")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"FilterableField")," is very similar to the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://typegraphql.ml/docs/types-and-fields.html"}),Object(i.b)("inlineCode",{parentName:"a"},"Field"))," from\nTypeGraphQL, however it allows you to specify the fields that should be filterable when querying."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"If you use the @nestjs/graphql ",Object(i.b)("inlineCode",{parentName:"p"},"Field")," decorator it will not be exposed in the query type for the DTO."))),Object(i.b)("h3",{id:"options"},"Options"),Object(i.b)("p",null,"In addition to the normal field options you can also specify the following options"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"allowedComparisons")," - An array of allowed comparisons. You can use this option to allow a subset of filter comparisons when querying through graphql. ",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"This option is useful if the field is expensive to query on for certain operators, or your data source supports a limited set of comparisons."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filterRequired")," - When set to ",Object(i.b)("inlineCode",{parentName:"li"},"true")," the field will be required whenever a ",Object(i.b)("inlineCode",{parentName:"li"},"filter")," is used. The ",Object(i.b)("inlineCode",{parentName:"li"},"filter")," requirement applies to all ",Object(i.b)("inlineCode",{parentName:"li"},"read"),", ",Object(i.b)("inlineCode",{parentName:"li"},"update"),", and ",Object(i.b)("inlineCode",{parentName:"li"},"delete")," endpoints that use a ",Object(i.b)("inlineCode",{parentName:"li"},"filter"),".",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"filterRequired")," option is useful when your entity has an index that requires a subset of fields to be used to provide certain level of query performance."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"NOTE"),": When a field is a required in a filter the default ",Object(i.b)("inlineCode",{parentName:"li"},"filter")," option is ignored.   ")))),Object(i.b)("h3",{id:"example"},"Example"),Object(i.b)("p",null,"In the following example we allow ",Object(i.b)("inlineCode",{parentName:"p"},"id"),", ",Object(i.b)("inlineCode",{parentName:"p"},"title"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"completed")," to be used in queries."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.dto.ts"',title:'"todo-item.dto.ts"'}),"import { FilterableField } from '@nestjs-query/query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\nexport class TodoItemDTO {\n  @FilterableField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n")),Object(i.b)("h3",{id:"example---allowedcomparisons"},"Example - allowedComparisons"),Object(i.b)("p",null,"In the following example the ",Object(i.b)("inlineCode",{parentName:"p"},"allowedComparisons")," option is demonstrated by restricting the comparisons that are allowed when filtering on certain fields."),Object(i.b)("p",null,"For the ",Object(i.b)("inlineCode",{parentName:"p"},"id")," field only ",Object(i.b)("inlineCode",{parentName:"p"},"eq"),", ",Object(i.b)("inlineCode",{parentName:"p"},"neq"),", ",Object(i.b)("inlineCode",{parentName:"p"},"in"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"notIn")," comparisons will be exposed in the schema."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"title")," field will only allow ",Object(i.b)("inlineCode",{parentName:"p"},"eq"),", ",Object(i.b)("inlineCode",{parentName:"p"},"like"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"notLike"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.dto.ts" {6,9}',title:'"todo-item.dto.ts"',"{6,9}":!0}),"import { FilterableField } from '@nestjs-query/query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\nexport class TodoItemDTO {\n  @FilterableField(() => ID, { allowedComparisons: ['eq', 'neq', 'in', 'notIn'] })\n  id!: string;\n\n  @FilterableField({ allowedComparisons: ['eq', 'like', 'notLike'] })\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n")),Object(i.b)("h3",{id:"example---filterrequired"},"Example - filterRequired"),Object(i.b)("p",null,"In the following example the ",Object(i.b)("inlineCode",{parentName:"p"},"filterRequired")," option is applied to the ",Object(i.b)("inlineCode",{parentName:"p"},"completed")," field, ensuring that all endpoints that use a filter will require a comparison on the ",Object(i.b)("inlineCode",{parentName:"p"},"completed")," field."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.dto.ts" {12}',title:'"todo-item.dto.ts"',"{12}":!0}),"import { FilterableField } from '@nestjs-query/query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\nexport class TodoItemDTO {\n  @FilterableField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField({ filterRequired: true })\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n")))}d.isMDXComponent=!0},190:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=i.a.createContext({}),c=function(e){var t=i.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return i.a.createElement(d.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),s=c(n),m=a,u=s["".concat(l,".").concat(m)]||s[m]||b[m]||r;return n?i.a.createElement(u,o(o({ref:t},d),{},{components:n})):i.a.createElement(u,o({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);