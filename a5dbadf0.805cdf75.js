/*! For license information please see a5dbadf0.805cdf75.js.LICENSE */
(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{107:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return d}));var a=n(1),o=(n(0),n(122));n(126),n(127);const r={title:"Resolvers",sidebar_label:"Resolvers"},i={id:"graphql/resolvers",title:"Resolvers",description:"import Tabs from '@theme/Tabs';",source:"@site/docs/graphql/resolvers.mdx",permalink:"/nestjs-query/docs/graphql/resolvers",editUrl:"https://github.com/doug-martin/nestjs-query/edit/master/website/docs/graphql/resolvers.mdx",sidebar_label:"Resolvers",sidebar:"docs",previous:{title:"DTOs",permalink:"/nestjs-query/docs/graphql/dtos"},next:{title:"Queries",permalink:"/nestjs-query/docs/graphql/queries"}},l=[{value:"CRUDResolver",id:"crudresolver",children:[]},{value:"Options",id:"options",children:[]},{value:"Examples",id:"examples",children:[{value:"Create and Update DTOs.",id:"create-and-update-dtos",children:[]},{value:"Disabling Endpoints.",id:"disabling-endpoints",children:[]},{value:"Guards, Pipes, Filters, and Interceptors",id:"guards-pipes-filters-and-interceptors",children:[]}]},{value:"Individual Resolvers",id:"individual-resolvers",children:[{value:"<code>CreateResolver</code>",id:"createresolver",children:[]},{value:"<code>ReadResolver</code>",id:"readresolver",children:[]},{value:"<code>UpdateResolver</code>",id:"updateresolver",children:[]},{value:"<code>DeleteResolver</code>",id:"deleteresolver",children:[]},{value:"Mixins",id:"mixins",children:[]}]}],s={rightToc:l},p="wrapper";function d({components:e,...t}){return Object(o.b)(p,Object(a.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"crudresolver"},"CRUDResolver"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"CRUDResolver")," is the easiest way to get started. You can extend it to automatically add crud methods to your\ngraphql schema."),Object(o.b)("p",null,"Resolvers work the same as they do in ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.nestjs.com/graphql/resolvers-map"}),Object(o.b)("inlineCode",{parentName:"a"},"@nestjs/graphql"))," by annotating\nyour class with ",Object(o.b)("inlineCode",{parentName:"p"},"@Resolver"),"."),Object(o.b)("p",null,"For example you can create a resolver for the DTO defined above with the following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver, Query, Args } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemService } from './todo-item.service';\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO) {\n  constructor(readonly service: TodoItemService) {\n    super(service);\n  }\n}\n\n")),Object(o.b)("p",null,"The methods that will be exposed for the ",Object(o.b)("inlineCode",{parentName:"p"},"TodoItemDTO")," are"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"todoItem")," - Find a single ",Object(o.b)("inlineCode",{parentName:"li"},"TodoItem")," by id."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"todoItems")," - Filter, sort, and page ",Object(o.b)("inlineCode",{parentName:"li"},"TodoItems")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"createOneTodoItem")," - Create a single ",Object(o.b)("inlineCode",{parentName:"li"},"TodoItem")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"createManyTodoItems")," - Create multiple ",Object(o.b)("inlineCode",{parentName:"li"},"TodoItems"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"updateOneTodoItem")," - Update a single ",Object(o.b)("inlineCode",{parentName:"li"},"TodoItem")," by id."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"updateManyTodoItems")," - Update multiple ",Object(o.b)("inlineCode",{parentName:"li"},"TodoItems")," using a filter."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"deleteOneTodoItem")," - Delete a single ",Object(o.b)("inlineCode",{parentName:"li"},"TodoItem")," by id."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"deleteManyTodoItems")," - Delete multiple ",Object(o.b)("inlineCode",{parentName:"li"},"TodoItems")," using a filter.")),Object(o.b)("p",null,"You can read more about the methods in the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"./queries"}),"Queries")," and ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"./mutations"}),"Mutations")," docs."),Object(o.b)("h2",{id:"options"},"Options"),Object(o.b)("p",null,"The Crud Resolver accepts a number of options to control your endpoints."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"CreateDTOClass")," - The input DTO to use for create mutations. See ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#create-and-update-dtos"}),"Create and Update DTOs"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"UpdateDTOClass")," - The input DTO to use for update mutations. See ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#create-and-update-dtos"}),"Create and Update DTOs"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"create")," - In addition to ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#resolveroptions"}),Object(o.b)("inlineCode",{parentName:"a"},"ResolverOptions"))," you can also specify the following"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CreateDTOClass")," - The input DTO to use for create mutations."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CreateOneArgs")," - The ",Object(o.b)("inlineCode",{parentName:"li"},"ArgsType")," to use for create one mutations."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CreateManyArgs")," - The ",Object(o.b)("inlineCode",{parentName:"li"},"ArgsType")," to use for create many mutations."))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"read")," - In addition to ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#resolveroptions"}),Object(o.b)("inlineCode",{parentName:"a"},"ResolverOptions"))," you can also specify the following"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"QueryArgs")," - The ",Object(o.b)("inlineCode",{parentName:"li"},"ArgsType")," to use to filter records in ",Object(o.b)("inlineCode",{parentName:"li"},"queryMany")," endpoint."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Connection")," - The ",Object(o.b)("inlineCode",{parentName:"li"},"ObjectType")," to return from the ",Object(o.b)("inlineCode",{parentName:"li"},"queryMany")," endpoint."))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"update")," - In addition to ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#resolveroptions"}),Object(o.b)("inlineCode",{parentName:"a"},"ResolverOptions"))," you can also specify the following"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"UpdateDTOClass")," - The input DTO to use for update mutations."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"UpdateOneArgs")," - The ",Object(o.b)("inlineCode",{parentName:"li"},"ArgsType")," to use for update one mutations."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"UpdateManyArgs")," - The ",Object(o.b)("inlineCode",{parentName:"li"},"ArgsType")," to use for update many mutations."))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"delete")," - In addition to ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#resolveroptions"}),Object(o.b)("inlineCode",{parentName:"a"},"ResolverOptions"))," you can also specify the following"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CreateOneArgs")," - The ",Object(o.b)("inlineCode",{parentName:"li"},"ArgsType")," to use for delete one mutations."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CreateManyArgs")," - The ",Object(o.b)("inlineCode",{parentName:"li"},"ArgsType")," to use for delete many mutations.")))),Object(o.b)("h4",{id:"resolveroptions"},Object(o.b)("inlineCode",{parentName:"h4"},"ResolverOptions")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"create"),", ",Object(o.b)("inlineCode",{parentName:"p"},"read"),", ",Object(o.b)("inlineCode",{parentName:"p"},"update"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"delete")," options above all accept the following options."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"dtoName")," - Set to override the default name (the name passed to ",Object(o.b)("inlineCode",{parentName:"li"},"@ObjectType")," or the name of the class)."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"disabled=false")," - Set to true to disable all endpoints."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"guards=[]")," - An array of ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.nestjs.com/guards"}),"guards")," to add to all endpoints."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"interceptors=[]")," - An array of ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.nestjs.com/interceptors"}),"interceptors")," to add to all endpoints."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"pipes=[]")," - An array of ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.nestjs.com/pipes"}),"pipes")," to add to all endpoints."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"filters=[]")," - An array of ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.nestjs.com/exception-filters"}),"filters")," to add to all endpoints."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"one"),", ",Object(o.b)("inlineCode",{parentName:"li"},"many")," - Both the ",Object(o.b)("inlineCode",{parentName:"li"},"one")," and ",Object(o.b)("inlineCode",{parentName:"li"},"many")," accept the following options:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"disabled=false")," - Set to true to disable the endpoint."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"guards=[]")," - An array of ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.nestjs.com/guards"}),"guards")," to add to the endpoint."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"interceptors=[]")," - An array of ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.nestjs.com/interceptors"}),"interceptors")," to add to the endpoint."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"pipes=[]")," - An array of ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.nestjs.com/pipes"}),"pipes")," to add to the endpoint."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"filters=[]")," - An array of ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.nestjs.com/exception-filters"}),"filters")," to add to the endpoint.")))),Object(o.b)("h2",{id:"examples"},"Examples"),Object(o.b)("h3",{id:"create-and-update-dtos"},"Create and Update DTOs."),Object(o.b)("p",null,"There may be times when you want to specify certain validation or only allow certain fields when updating or\ncreating records."),Object(o.b)("p",null,"To allow for this you can specify a ",Object(o.b)("inlineCode",{parentName:"p"},"CreateDTOClass")," and ",Object(o.b)("inlineCode",{parentName:"p"},"UpdateDTOClass")," when extending ",Object(o.b)("inlineCode",{parentName:"p"},"CRUDResolver"),"."),Object(o.b)("h4",{id:"example"},"Example"),Object(o.b)("p",null,"In this example we'll create a new ",Object(o.b)("inlineCode",{parentName:"p"},"TodoItemInputDTO")," that adds validation and limits the fields you can modify."),Object(o.b)("p",null,"Assume we have the following class ",Object(o.b)("inlineCode",{parentName:"p"},"todo-item-input.dto.ts")," which omits the ",Object(o.b)("inlineCode",{parentName:"p"},"id"),", ",Object(o.b)("inlineCode",{parentName:"p"},"created"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"updated")," fields from\nthe original DTO."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Field, InputType } from 'type-graphql';\nimport { IsString, Length } from 'class-validator';\n\n@InputType('TodoItemInput')\nexport class TodoItemInputDTO {\n  @Field()\n  // ensure it is a string field\n  @IsString()\n  // min length of 5 and max of 5 characters\n  @Length(5, 50)\n  title!: string;\n\n  @Field()\n  completed!: boolean;\n}\n")),Object(o.b)("p",null,"We can then update our resolver to"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemInputDTO } from './dto/create-todo-item.dto';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemService } from './todo-item.service';\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  CreateDTOClass: TodoItemInputDTO,\n  UpdateDTOClass: TodoItemInputDTO,\n}) {\n  constructor(readonly service: TodoItemService) {\n    super(service);\n  }\n}\n")),Object(o.b)("h3",{id:"disabling-endpoints"},"Disabling Endpoints."),Object(o.b)("p",null,"There may be scenarios where you wish to disable certain methods."),Object(o.b)("p",null,"Using the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#options"}),"options")," describe above we can disable different actions."),Object(o.b)("p",null,"In this example we disable all ",Object(o.b)("inlineCode",{parentName:"p"},"create")," endpoints"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemService } from './todo-item.service';\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  create: { disabled: true },\n}) {\n  constructor(readonly service: TodoItemService) {\n    super(service);\n  }\n}\n")),Object(o.b)("p",null,"You can also disable individual endpoints."),Object(o.b)("p",null,"In this example we disable all ",Object(o.b)("inlineCode",{parentName:"p"},"many")," mutations. This will prevent ",Object(o.b)("inlineCode",{parentName:"p"},"createManyTodoItems"),", ",Object(o.b)("inlineCode",{parentName:"p"},"updateManyTodoItems"),",\n",Object(o.b)("inlineCode",{parentName:"p"},"deleteManyTodoItems")," from being exposed in the graphql schema."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE")," The same pattern applies for disabling the ",Object(o.b)("inlineCode",{parentName:"p"},"one")," endpoints."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemService } from './todo-item.service';\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  create: { many: { disabled: true } },\n  update: { many: { disabled: true } },\n  delete: { many: { disabled: true } },\n}) {\n  constructor(readonly service: TodoItemService) {\n    super(service);\n  }\n}\n")),Object(o.b)("h3",{id:"guards-pipes-filters-and-interceptors"},"Guards, Pipes, Filters, and Interceptors"),Object(o.b)("p",null,"In this section we'll just demonstrate using a ",Object(o.b)("inlineCode",{parentName:"p"},"guard")," but the same pattern applies for ",Object(o.b)("inlineCode",{parentName:"p"},"pipes"),", ",Object(o.b)("inlineCode",{parentName:"p"},"filters")," and\n",Object(o.b)("inlineCode",{parentName:"p"},"interceptors")),Object(o.b)("p",null,"To set up a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.nestjs.com/guards"}),"guard")," for endpoint you can use the ",Object(o.b)("inlineCode",{parentName:"p"},"guards")," option."),Object(o.b)("p",null,"Assume we have the following auth guard that checks for a certain header and value."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  Logger,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { AUTH_HEADER_NAME } from './constants';\nimport { config } from './config';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  private logger = new Logger(AuthGuard.name);\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const ctx = GqlExecutionContext.create(context);\n    const req = ctx.getContext().request;\n    this.logger.log(`Req = ${req.headers}`);\n    return req.headers[AUTH_HEADER_NAME] === config.auth.header;\n  }\n}\n")),Object(o.b)("p",null,"We can then add it to each of our mutation endpoints"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { AuthGuard } from '../auth.guard';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemService } from './todo-item.service';\n\nconst guards = [AuthGuard];\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  create: { guards },\n  update: { guards },\n  delete: { guards },\n}) {\n  constructor(readonly service: TodoItemService) {\n    super(service);\n  }\n}\n")),Object(o.b)("p",null,"Now any requests that go to a ",Object(o.b)("inlineCode",{parentName:"p"},"create"),", ",Object(o.b)("inlineCode",{parentName:"p"},"update")," or ",Object(o.b)("inlineCode",{parentName:"p"},"delete")," method will require the guard."),Object(o.b)("p",null,"You can also apply to individual methods using the ",Object(o.b)("inlineCode",{parentName:"p"},"one")," and ",Object(o.b)("inlineCode",{parentName:"p"},"many")," fields. For example lets put a guard on all many\nmutations."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { AuthGuard } from '../auth.guard';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemService } from './todo-item.service';\n\nconst guards = [AuthGuard];\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  create: { many: { guards } },\n  update: { many: { guards } },\n  delete: { many: { guards } },\n}) {\n  constructor(readonly service: TodoItemService) {\n    super(service);\n  }\n}\n")),Object(o.b)("h2",{id:"individual-resolvers"},"Individual Resolvers"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"@nestjs-query/query-graphql")," package exposes each part of ",Object(o.b)("inlineCode",{parentName:"p"},"CRUD")," into individual mixins and resolvers allowing you\nto pick and choose what functionality you want to expose."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE")," All examples below can be achieved with the options exposed through the ",Object(o.b)("inlineCode",{parentName:"p"},"CRUDResolver"),"."),Object(o.b)("h3",{id:"createresolver"},Object(o.b)("inlineCode",{parentName:"h3"},"CreateResolver")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"CreateResolver")," will only expose the ",Object(o.b)("inlineCode",{parentName:"p"},"createOne")," and ",Object(o.b)("inlineCode",{parentName:"p"},"createMany")," endpoints. The ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#options"}),"options")," described for\n",Object(o.b)("inlineCode",{parentName:"p"},"create")," can be passed to the ",Object(o.b)("inlineCode",{parentName:"p"},"CreateResolver")),Object(o.b)("p",null,"For example the following resolver will expose the ",Object(o.b)("inlineCode",{parentName:"p"},"createOneTodoItem")," and ",Object(o.b)("inlineCode",{parentName:"p"},"createManyTodoItems")," mutations."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { CreateResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemService } from './todo-item.service';\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends CreateResolver(TodoItemDTO) {\n  constructor(readonly service: TodoItemService) {\n    super(service);\n  }\n}\n")),Object(o.b)("h3",{id:"readresolver"},Object(o.b)("inlineCode",{parentName:"h3"},"ReadResolver")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"ReadResolver")," will only expose the ",Object(o.b)("inlineCode",{parentName:"p"},"query")," and ",Object(o.b)("inlineCode",{parentName:"p"},"findById")," endpoints. The ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#options"}),"options")," described for ",Object(o.b)("inlineCode",{parentName:"p"},"read"),"\ncan be passed to the ",Object(o.b)("inlineCode",{parentName:"p"},"ReadResolver")),Object(o.b)("p",null,"For example the following resolver will expose the ",Object(o.b)("inlineCode",{parentName:"p"},"todoItems")," and ",Object(o.b)("inlineCode",{parentName:"p"},"todoItem")," queries."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { ReadResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemService } from './todo-item.service';\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends ReadResolver(TodoItemDTO) {\n  constructor(readonly service: TodoItemService) {\n    super(service);\n  }\n}\n")),Object(o.b)("h3",{id:"updateresolver"},Object(o.b)("inlineCode",{parentName:"h3"},"UpdateResolver")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"UpdateResolver")," will only expose the ",Object(o.b)("inlineCode",{parentName:"p"},"updateOne")," and ",Object(o.b)("inlineCode",{parentName:"p"},"updateMany")," endpoints. The ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#options"}),"options")," described for\n",Object(o.b)("inlineCode",{parentName:"p"},"update")," can be passed to the ",Object(o.b)("inlineCode",{parentName:"p"},"UpdateResolver")),Object(o.b)("p",null,"For example the following resolver will expose the ",Object(o.b)("inlineCode",{parentName:"p"},"updateOneTodoItem")," and ",Object(o.b)("inlineCode",{parentName:"p"},"updateManyTodoItems")," mutations."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { UpdateResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\n\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemService } from './todo-item.service';\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends UpdateResolver(TodoItemDTO) {\n  constructor(readonly service: TodoItemService) {\n    super(service);\n  }\n}\n")),Object(o.b)("h3",{id:"deleteresolver"},Object(o.b)("inlineCode",{parentName:"h3"},"DeleteResolver")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"DeleteResolver")," will only expose the ",Object(o.b)("inlineCode",{parentName:"p"},"deleteOne")," and ",Object(o.b)("inlineCode",{parentName:"p"},"deleteMany")," endpoints. The ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#options"}),"options")," described for\n",Object(o.b)("inlineCode",{parentName:"p"},"delete")," can be passed to the ",Object(o.b)("inlineCode",{parentName:"p"},"DeleteResolver")),Object(o.b)("p",null,"For example the following resolver will expose the ",Object(o.b)("inlineCode",{parentName:"p"},"updateOneTodoItem")," and ",Object(o.b)("inlineCode",{parentName:"p"},"updateManyTodoItems")," mutations."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"import { DeleteResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemService } from './todo-item.service';\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends DeleteResolver(TodoItemDTO) {\n  constructor(readonly service: TodoItemService) {\n    super(service);\n  }\n}\n")),Object(o.b)("h3",{id:"mixins"},"Mixins"),Object(o.b)("p",null,"There are mixins for each of the resolvers described above."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Creatable")," - Mixin to add ",Object(o.b)("inlineCode",{parentName:"li"},"CreateResolver")," endpoints."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Readable")," - Mixin to add ",Object(o.b)("inlineCode",{parentName:"li"},"ReadResolver")," endpoints."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Updateable")," - Mixin to add ",Object(o.b)("inlineCode",{parentName:"li"},"UpdateResolver")," endpoints."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Deletable")," -  Mixin to add ",Object(o.b)("inlineCode",{parentName:"li"},"DeleteResolver")," endpoints.")),Object(o.b)("p",null,"The same options used to extend a resolver are used for mixins."),Object(o.b)("p",null,"Lets create a new custom read and update resolver"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Class } from '@nestjs-query/core';\nimport {\n  Readable,\n  ReadResolver,\n  UpdateResolver,\n} from '@nestjs-query/query-graphql/src';\n\nexport const ReadAndUpdateResolver = <DTO>(\n  DTOClass: Class<DTO>,\n): Class<ReadResolver<DTO>> & Class<UpdateResolver<DTO, DTO>> => {\n  return Readable(DTOClass)(UpdateResolver(DTOClass));\n};\n")),Object(o.b)("p",null,"Now we can use it to create other resolvers with only read and update endpoints."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends ReadAndUpdateResolver(TodoItemDTO) {\n  constructor(readonly service: TodoItemService) {\n    super(service);\n  }\n}\n")),Object(o.b)("h1",{id:"custom-methods"},"Custom Methods"),Object(o.b)("p",null,"You can define new methods leveraging methods and types from the base class."),Object(o.b)("p",null,"For example you can use the ",Object(o.b)("inlineCode",{parentName:"p"},"QueryType")," and ",Object(o.b)("inlineCode",{parentName:"p"},"ConnectionType")," to create a custom query method."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// import { ConnectionType, QueryType } from '@nestjs-query/query-graphql';\n// import { Query, Args } from '@nestjs/graphql';\n// import { Filter } from '@nestjs-query/core';\n\n// Set the return type to the generated ConnectionType\n@Query(() => TodoItemResolver.ConnectionType)\ncompletedTodoItems(\n  // Set the type to the generated QueryType\n  @Args({ type: () => TodoItemResolver.QueryType })\n  query: QueryType<TodoItemDTO>,\n): Promise<ConnectionType<TodoItemDTO>> {\n  // add the completed filter the user provided filter\n  const filter: Filter<TodoItemDTO> = {\n    ...query.filter,\n    ...{ completed: { is: true } },\n  };\n\n  // call the original query method with the new query\n  return this.query({ ...query, ...{ filter } });\n}\n")))}d.isMDXComponent=!0},121:function(e,t,n){var a;!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var a=arguments[t];if(a){var r=typeof a;if("string"===r||"number"===r)e.push(a);else if(Array.isArray(a)&&a.length){var i=o.apply(null,a);i&&e.push(i)}else if("object"===r)for(var l in a)n.call(a,l)&&a[l]&&e.push(l)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(a=function(){return o}.apply(t,[]))||(e.exports=a)}()},122:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return O}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),d=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},c=function(e){var t=d(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},b="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(n),b=a,u=c["".concat(i,".").concat(b)]||c[b]||m[b]||r;return n?o.a.createElement(u,l({ref:t},p,{components:n})):o.a.createElement(u,l({ref:t},p))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[b]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},126:function(e,t,n){"use strict";var a=n(0),o=n.n(a),r=n(121),i=n.n(r),l=n(84),s=n.n(l);const p={left:37,right:39};t.a=function(e){const{block:t,children:n,defaultValue:r,values:l}=e,[d,c]=Object(a.useState)(r),b=[];return o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:i()("tabs",{"tabs--block":t})},l.map(({value:e,label:t})=>o.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":d===e,className:i()("tab-item",s.a.tabItem,{"tab-item--active":d===e}),key:e,ref:e=>b.push(e),onKeyDown:e=>((e,t,n)=>{switch(n.keyCode){case p.right:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case p.left:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(b,e.target,e),onFocus:()=>c(e),onClick:()=>c(e)},t))),o.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(n).filter(e=>e.props.value===d)[0]))}},127:function(e,t,n){"use strict";var a=n(0),o=n.n(a);t.a=function(e){return o.a.createElement("div",null,e.children)}}}]);