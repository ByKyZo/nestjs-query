(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{139:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return m})),n.d(t,"default",(function(){return p}));var o=n(2),r=(n(0),n(198)),a=n(202),i=n(203);const l={title:"Resolvers",sidebar_label:"Resolvers"},s={unversionedId:"graphql/resolvers",id:"graphql/resolvers",isDocsHomePage:!1,title:"Resolvers",description:"Defining the Resolver",source:"@site/docs/graphql/resolvers.mdx",slug:"/graphql/resolvers",permalink:"/nestjs-query/docs/graphql/resolvers",editUrl:"https://github.com/doug-martin/nestjs-query/edit/master/documentation/docs/graphql/resolvers.mdx",version:"current",sidebar_label:"Resolvers",sidebar:"docs",previous:{title:"DTOs",permalink:"/nestjs-query/docs/graphql/dtos"},next:{title:"Queries",permalink:"/nestjs-query/docs/graphql/queries"}},m=[{value:"Defining the Resolver",id:"defining-the-resolver",children:[{value:"Auto Generated Resolver",id:"auto-generated-resolver",children:[]},{value:"CRUDResolver",id:"crudresolver",children:[]},{value:"Generated Endpoints",id:"generated-endpoints",children:[]}]},{value:"Options",id:"options",children:[]},{value:"Examples",id:"examples",children:[{value:"Create and Update DTOs.",id:"create-and-update-dtos",children:[]},{value:"Disabling Endpoints.",id:"disabling-endpoints",children:[]},{value:"Guards, Pipes, Filters, and Interceptors",id:"guards-pipes-filters-and-interceptors",children:[]},{value:"Default Filter",id:"default-filter",children:[]},{value:"Default Paging",id:"default-paging",children:[]},{value:"Paging Strategy",id:"paging-strategy",children:[]},{value:"Paging with Total Count",id:"paging-with-total-count",children:[]},{value:"Default Sort",id:"default-sort",children:[]},{value:"Override Endpoint Name",id:"override-endpoint-name",children:[]}]},{value:"Individual Resolvers",id:"individual-resolvers",children:[{value:"<code>CreateResolver</code>",id:"createresolver",children:[]},{value:"<code>ReadResolver</code>",id:"readresolver",children:[]},{value:"<code>UpdateResolver</code>",id:"updateresolver",children:[]},{value:"<code>DeleteResolver</code>",id:"deleteresolver",children:[]}]},{value:"Custom Methods",id:"custom-methods",children:[]}],d={rightToc:m};function p({components:e,...t}){return Object(r.b)("wrapper",Object(o.a)({},d,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"defining-the-resolver"},"Defining the Resolver"),Object(r.b)("h3",{id:"auto-generated-resolver"},"Auto Generated Resolver"),Object(r.b)("p",null,"The easiest way to get started is to use the ",Object(r.b)("inlineCode",{parentName:"p"},"@NestjsQueryGraphQLModule"),". The ",Object(r.b)("inlineCode",{parentName:"p"},"NestjsQueryGraphQLModule")," will automatically create a CRUDResolver for you."),Object(r.b)(a.a,{defaultValue:"typeorm",groupId:"orm",values:[{label:"TypeOrm",value:"typeorm"},{label:"Sequelize",value:"sequelize"},{label:"Mongoose",value:"mongoose"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"typeorm",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'}),"import { NestjsQueryGraphQLModule } from '@nestjs-query/query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@nestjs-query/query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),Object(r.b)(i.a,{value:"sequelize",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'}),"import { NestjsQueryGraphQLModule } from '@nestjs-query/query-graphql';\nimport { NestjsQuerySequelizeModule } from '@nestjs-query/query-sequelize';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQuerySequelizeModule.forFeature([TodoItemEntity])],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),Object(r.b)(i.a,{value:"mongoose",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'}),"import { NestjsQueryGraphQLModule } from '@nestjs-query/query-graphql';\nimport { NestjsQueryMongooseModule } from '@nestjs-query/query-mongoose';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [\n        NestjsQueryMongooseModule.forFeature([\n          { document: TodoItemEntity, name: TodoItemEntity.name, schema: TodoItemEntitySchema },\n        ]),\n      ],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n")))),Object(r.b)("h3",{id:"crudresolver"},"CRUDResolver"),Object(r.b)("p",null,"If you want to add custom queries or mutations you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"CRUDResolver")," to manually define your resolver."),Object(r.b)("p",null,"Resolvers work the same as they do in ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://docs.nestjs.com/graphql/resolvers-map"}),Object(r.b)("inlineCode",{parentName:"a"},"@nestjs/graphql"))," by annotating\nyour class with ",Object(r.b)("inlineCode",{parentName:"p"},"@Resolver"),"."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"}," In this example the DTO and entity are the same shape, if you have a case where they are different or have computed\nfields check out ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/nestjs-query/docs/concepts/advanced/assemblers"}),"Assemblers")," to understand how to convert to and from the\nDTO/Entity."))),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'}),"import { QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver, Query, Args } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO) {\n  constructor(\n    @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n\n")),Object(r.b)("h3",{id:"generated-endpoints"},"Generated Endpoints"),Object(r.b)("p",null,"When using the auto-generated resolver or extending ",Object(r.b)("inlineCode",{parentName:"p"},"CRUDResolver")," the methods that will be exposed for the ",Object(r.b)("inlineCode",{parentName:"p"},"TodoItemDTO")," are:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"todoItem")," - Find a single ",Object(r.b)("inlineCode",{parentName:"li"},"TodoItem")," by id."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"todoItems")," - Filter, sort, and page ",Object(r.b)("inlineCode",{parentName:"li"},"TodoItems")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"createOneTodoItem")," - Create a single ",Object(r.b)("inlineCode",{parentName:"li"},"TodoItem")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"createManyTodoItems")," - Create multiple ",Object(r.b)("inlineCode",{parentName:"li"},"TodoItems"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"updateOneTodoItem")," - Update a single ",Object(r.b)("inlineCode",{parentName:"li"},"TodoItem")," by id."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"updateManyTodoItems")," - Update multiple ",Object(r.b)("inlineCode",{parentName:"li"},"TodoItems")," using a filter."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"deleteOneTodoItem")," - Delete a single ",Object(r.b)("inlineCode",{parentName:"li"},"TodoItem")," by id."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"deleteManyTodoItems")," - Delete multiple ",Object(r.b)("inlineCode",{parentName:"li"},"TodoItems")," using a filter.")),Object(r.b)("p",null,"You can read more about the methods in the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/nestjs-query/docs/graphql/queries"}),"Queries")," and ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/nestjs-query/docs/graphql/mutations"}),"Mutations")," docs."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"options"},"Options"),Object(r.b)("p",null,"When using ",Object(r.b)("inlineCode",{parentName:"p"},"NestjsQueryGraphQLModule")," or ",Object(r.b)("inlineCode",{parentName:"p"},"CRUDResolver")," you can define a number of options to control your endpoints."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"CreateDTOClass")," - The input DTO to use for create mutations. See ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"#create-and-update-dtos"}),"Create and Update DTOs"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"UpdateDTOClass")," - The input DTO to use for update mutations. See ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"#create-and-update-dtos"}),"Create and Update DTOs"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"enableSubscriptions?")," - Set to ",Object(r.b)("inlineCode",{parentName:"p"},"true")," to enable graphql subscriptions. See ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/nestjs-query/docs/graphql/subscriptions"}),"Subscriptions"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"pagingStrategy?")," - Specify to use an alternate paging strategy (",Object(r.b)("inlineCode",{parentName:"p"},"CURSOR"),", ",Object(r.b)("inlineCode",{parentName:"p"},"OFFSET"),", 'NONE'). See ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"#paging-strategy"}),"Paging Strategy"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"enableTotalCount?")," - When using ",Object(r.b)("inlineCode",{parentName:"p"},"CURSOR")," based paging set to true to expose a ",Object(r.b)("inlineCode",{parentName:"p"},"totalCount")," field on all connection from this resolver.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"enableTotalCount?")," - When using ",Object(r.b)("inlineCode",{parentName:"p"},"CURSOR")," based paging set to true to expose a ",Object(r.b)("inlineCode",{parentName:"p"},"totalCount")," field on all connection from this resolver.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"enableAggregate?")," - When set to true an aggregate query will be enabled on the type and all relations (unless the explicitly disable it). See ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/nestjs-query/docs/graphql/aggregations"}),"Aggregation"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"create")," - In addition to ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"#resolveroptions"}),Object(r.b)("inlineCode",{parentName:"a"},"ResolverOptions"))," you can also specify the following"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"CreateDTOClass")," - The input DTO to use for create mutations."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"CreateOneInput")," - The ",Object(r.b)("inlineCode",{parentName:"li"},"InputType")," to use for create one mutations."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"CreateManyInput")," - The ",Object(r.b)("inlineCode",{parentName:"li"},"InputType")," to use for create many mutations."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"read")," - In addition to ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"#resolveroptions"}),Object(r.b)("inlineCode",{parentName:"a"},"ResolverOptions"))," you can also specify the following"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"QueryArgs")," - The ",Object(r.b)("inlineCode",{parentName:"li"},"ArgsType")," to use to filter records in ",Object(r.b)("inlineCode",{parentName:"li"},"queryMany")," endpoint."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Connection")," - The ",Object(r.b)("inlineCode",{parentName:"li"},"ObjectType")," to return from the ",Object(r.b)("inlineCode",{parentName:"li"},"queryMany")," endpoint."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"pagingStrategy?")," - Specify to use an alternate paging strategy (",Object(r.b)("inlineCode",{parentName:"li"},"CURSOR"),", ",Object(r.b)("inlineCode",{parentName:"li"},"OFFSET"),", 'NONE'). See ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"#paging-strategy"}),"Paging Strategy"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"enableTotalCount?")," - When using ",Object(r.b)("inlineCode",{parentName:"li"},"CURSOR")," based paging set to true to expose a ",Object(r.b)("inlineCode",{parentName:"li"},"totalCount")," field on the connection."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"defaultResultSize=10")," - The default number of results to return"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"maxResultsSize=50")," - The maximum number of results an end user can specify to return from a query."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"defaultSort=[]")," - The default sort to use when querying for records."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"defaultFilter={}")," - The default filter to use when querying for records."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"update")," - In addition to ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"#resolveroptions"}),Object(r.b)("inlineCode",{parentName:"a"},"ResolverOptions"))," you can also specify the following"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"UpdateDTOClass")," - The input DTO to use for update mutations."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"UpdateOneInput")," - The ",Object(r.b)("inlineCode",{parentName:"li"},"InputType")," to use for update one mutations."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"UpdateManyInput")," - The ",Object(r.b)("inlineCode",{parentName:"li"},"InputType")," to use for update many mutations."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"delete")," - In addition to ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"#resolveroptions"}),Object(r.b)("inlineCode",{parentName:"a"},"ResolverOptions"))," you can also specify the following"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"DeleteOneInput")," - The ",Object(r.b)("inlineCode",{parentName:"li"},"InputType")," to use for delete one mutations."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"DeleteManyInput")," - The ",Object(r.b)("inlineCode",{parentName:"li"},"InputType")," to use for delete many mutations."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"aggregate")," - In addition to ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"#resolveroptions"}),Object(r.b)("inlineCode",{parentName:"a"},"ResolverOptions"))," you can also specify the following"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"enabled")," - Set to true to enable aggregations. If this is used in place of the root ",Object(r.b)("inlineCode",{parentName:"li"},"enableAggregate")," option relations will not have aggregate queries exposed.")))),Object(r.b)("h4",{id:"resolveroptions"},Object(r.b)("inlineCode",{parentName:"h4"},"ResolverOptions")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"create"),", ",Object(r.b)("inlineCode",{parentName:"p"},"read"),", ",Object(r.b)("inlineCode",{parentName:"p"},"update"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"delete")," options above all accept the following options."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"dtoName")," - Set to override the default name (the name passed to ",Object(r.b)("inlineCode",{parentName:"li"},"@ObjectType")," or the name of the class)."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"disabled=false")," - Set to true to disable all endpoints."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"guards=[]")," - An array of ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://docs.nestjs.com/guards"}),"guards")," to add to all endpoints."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"interceptors=[]")," - An array of ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://docs.nestjs.com/interceptors"}),"interceptors")," to add to all endpoints."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"pipes=[]")," - An array of ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://docs.nestjs.com/pipes"}),"pipes")," to add to all endpoints."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filters=[]")," - An array of ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://docs.nestjs.com/exception-filters"}),"filters")," to add to all endpoints."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"decorators=[]")," - An array of custom ",Object(r.b)("inlineCode",{parentName:"li"},"PropertyDecorator")," or ",Object(r.b)("inlineCode",{parentName:"li"},"MethodDecorators")," to add to the endpoint."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"enableSubscriptions?")," - Set to ",Object(r.b)("inlineCode",{parentName:"li"},"true")," to enable graphql subscriptions. See ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"/nestjs-query/docs/graphql/subscriptions"}),"Subscriptions"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"one"),", ",Object(r.b)("inlineCode",{parentName:"li"},"many")," - Both the ",Object(r.b)("inlineCode",{parentName:"li"},"one")," and ",Object(r.b)("inlineCode",{parentName:"li"},"many")," accept the following options:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"name?")," - Override the endpoint name."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"disabled=false")," - Set to true to disable the endpoint."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"enableSubscriptions?")," - Set to ",Object(r.b)("inlineCode",{parentName:"li"},"true")," to enable graphql subscriptions. See ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"/nestjs-query/docs/graphql/subscriptions"}),"Subscriptions"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"guards=[]")," - An array of ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://docs.nestjs.com/guards"}),"guards")," to add to the endpoint."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"interceptors=[]")," - An array of ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://docs.nestjs.com/interceptors"}),"interceptors")," to add to the endpoint."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"pipes=[]")," - An array of ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://docs.nestjs.com/pipes"}),"pipes")," to add to the endpoint."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filters=[]")," - An array of ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://docs.nestjs.com/exception-filters"}),"filters")," to add to the endpoint."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"decorators=[]")," - An array of custom ",Object(r.b)("inlineCode",{parentName:"li"},"PropertyDecorator")," or ",Object(r.b)("inlineCode",{parentName:"li"},"MethodDecorators")," to add to the endpoint.")))),Object(r.b)("hr",null),Object(r.b)("h2",{id:"examples"},"Examples"),Object(r.b)("h3",{id:"create-and-update-dtos"},"Create and Update DTOs."),Object(r.b)("p",null,"There may be times when you want to specify certain validation or only allow certain fields when updating or\ncreating records."),Object(r.b)("p",null,"To allow for this you can specify the ",Object(r.b)("inlineCode",{parentName:"p"},"CreateDTOClass")," and ",Object(r.b)("inlineCode",{parentName:"p"},"UpdateDTOClass")," options."),Object(r.b)("h4",{id:"example"},"Example"),Object(r.b)("p",null,"In this example we'll create a new ",Object(r.b)("inlineCode",{parentName:"p"},"TodoItemInputDTO")," that adds validation and limits the fields you can modify."),Object(r.b)("p",null,"Assume we have the following class ",Object(r.b)("inlineCode",{parentName:"p"},"todo-item.input.ts")," which omits the ",Object(r.b)("inlineCode",{parentName:"p"},"id"),", ",Object(r.b)("inlineCode",{parentName:"p"},"created"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"updated")," fields from\nthe original DTO."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.input.ts"',title:'"todo-item.input.ts"'}),"import { Field, InputType } from '@nestjs/graphql';\nimport { IsString, Length } from 'class-validator';\n\n@InputType('TodoItemInput')\nexport class TodoItemInputDTO {\n  @Field()\n  // ensure it is a string field\n  @IsString()\n  // min length of 5 and max of 5 characters\n  @Length(5, 50)\n  title!: string;\n\n  @Field()\n  completed!: boolean;\n}\n")),Object(r.b)("p",null,"We can then update our resolver to use the new ",Object(r.b)("inlineCode",{parentName:"p"},"TodoItemInputDTO")),Object(r.b)(a.a,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"module",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'}),"import { NestjsQueryGraphQLModule } from '@nestjs-query/query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@nestjs-query/query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemInputDTO } from './todo-item.input';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        CreateDTOClass: TodoItemInputDTO,\n        UpdateDTOClass: TodoItemInputDTO,\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),Object(r.b)(i.a,{value:"resolver",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'}),"import { QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemInputDTO } from './todo-item.input';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  CreateDTOClass: TodoItemInputDTO,\n  UpdateDTOClass: TodoItemInputDTO,\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"disabling-endpoints"},"Disabling Endpoints."),Object(r.b)("p",null,"There may be scenarios where you wish to disable certain methods."),Object(r.b)("p",null,"Using the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"#options"}),"options")," describe above we can disable different actions."),Object(r.b)("p",null,"In this example we disable all ",Object(r.b)("inlineCode",{parentName:"p"},"create")," endpoints"),Object(r.b)(a.a,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"module",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'}),"import { NestjsQueryGraphQLModule } from '@nestjs-query/query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@nestjs-query/query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        create: { disabled: true }\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),Object(r.b)(i.a,{value:"resolver",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'}),"import { QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  create: { disabled: true },\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),Object(r.b)("p",null,"You can also disable individual endpoints."),Object(r.b)("p",null,"In this example we disable all ",Object(r.b)("inlineCode",{parentName:"p"},"many")," mutations. This will prevent ",Object(r.b)("inlineCode",{parentName:"p"},"createManyTodoItems"),", ",Object(r.b)("inlineCode",{parentName:"p"},"updateManyTodoItems"),",\n",Object(r.b)("inlineCode",{parentName:"p"},"deleteManyTodoItems")," from being exposed in the graphql schema."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"NOTE")," The same pattern applies for disabling the ",Object(r.b)("inlineCode",{parentName:"p"},"one")," endpoints."),Object(r.b)(a.a,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"module",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'}),"import { NestjsQueryGraphQLModule } from '@nestjs-query/query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@nestjs-query/query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        create: { many: { disabled: true } },\n        update: { many: { disabled: true } },\n        delete: { many: { disabled: true } },\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),Object(r.b)(i.a,{value:"resolver",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'}),"import { QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  create: { many: { disabled: true } },\n  update: { many: { disabled: true } },\n  delete: { many: { disabled: true } },\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"guards-pipes-filters-and-interceptors"},"Guards, Pipes, Filters, and Interceptors"),Object(r.b)("p",null,"In this section we'll just demonstrate using a ",Object(r.b)("inlineCode",{parentName:"p"},"guard")," but the same pattern applies for ",Object(r.b)("inlineCode",{parentName:"p"},"pipes"),", ",Object(r.b)("inlineCode",{parentName:"p"},"filters")," and\n",Object(r.b)("inlineCode",{parentName:"p"},"interceptors")),Object(r.b)("p",null,"To set up a ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://docs.nestjs.com/guards"}),"guard")," for endpoint you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"guards")," option."),Object(r.b)("p",null,"Assume we have the following auth guard that checks for a certain header and value."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="auth.guard.ts"',title:'"auth.guard.ts"'}),"import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  Logger,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { AUTH_HEADER_NAME } from './constants';\nimport { config } from './config';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  private logger = new Logger(AuthGuard.name);\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const ctx = GqlExecutionContext.create(context);\n    const req = ctx.getContext().request;\n    this.logger.log(`Req = ${req.headers}`);\n    return req.headers[AUTH_HEADER_NAME] === config.auth.header;\n  }\n}\n")),Object(r.b)("p",null,"We can then add it to each of our mutation endpoints"),Object(r.b)(a.a,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"module",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'}),"import { NestjsQueryGraphQLModule } from '@nestjs-query/query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@nestjs-query/query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { AuthGuard } from '../auth.guard';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\nconst guards = [AuthGuard];\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        create: { guards },\n        update: { guards },\n        delete: { guards },\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),Object(r.b)(i.a,{value:"resolver",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'}),"import { QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { AuthGuard } from '../auth.guard';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\nconst guards = [AuthGuard];\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  create: { guards },\n  update: { guards },\n  delete: { guards },\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),Object(r.b)("p",null,"Now any requests that go to a ",Object(r.b)("inlineCode",{parentName:"p"},"create"),", ",Object(r.b)("inlineCode",{parentName:"p"},"update")," or ",Object(r.b)("inlineCode",{parentName:"p"},"delete")," method will require the guard."),Object(r.b)("p",null,"You can also apply to individual methods using the ",Object(r.b)("inlineCode",{parentName:"p"},"one")," and ",Object(r.b)("inlineCode",{parentName:"p"},"many")," fields. For example lets put a guard on all many\nmutations."),Object(r.b)(a.a,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"module",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'}),"import { NestjsQueryGraphQLModule } from '@nestjs-query/query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@nestjs-query/query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { AuthGuard } from '../auth.guard';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\nconst guards = [AuthGuard];\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        create: { many: { guards } },\n        update: { many: { guards } },\n        delete: { many: { guards } },\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),Object(r.b)(i.a,{value:"resolver",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'}),"import { QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { AuthGuard } from '../auth.guard';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\nconst guards = [AuthGuard];\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  create: { many: { guards } },\n  update: { many: { guards } },\n  delete: { many: { guards } },\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"default-filter"},"Default Filter"),Object(r.b)("p",null,"When querying the default filter is empty. You can specify a default filter by using the ",Object(r.b)("inlineCode",{parentName:"p"},"read.defaultFilter")," option."),Object(r.b)("p",null,"In this example we specify the default filter to be ",Object(r.b)("inlineCode",{parentName:"p"},"completed IS TRUE"),"."),Object(r.b)(a.a,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"module",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'}),"import { NestjsQueryGraphQLModule } from '@nestjs-query/query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@nestjs-query/query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { AuthGuard } from '../auth.guard';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\nconst guards = [AuthGuard];\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        read: { defaultFilter: { completed: { is: true } } },\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),Object(r.b)(i.a,{value:"resolver",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'}),"import { QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  read: { defaultFilter: { completed: { is: true } } },\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"default-paging"},"Default Paging"),Object(r.b)("p",null,"By default all results will be limited to 10 records, with a max of 50 records returned."),Object(r.b)("p",null,"To override the default you can override the following options:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"read.defaultResultSize")," - The default number of results to return."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"read.maxResultSize")," - The maximum number of results an end user can specify to return.")),Object(r.b)("p",null,"In this example we specify the ",Object(r.b)("inlineCode",{parentName:"p"},"defaultResultSize")," to 5 and ",Object(r.b)("inlineCode",{parentName:"p"},"maxResultsSize")," to 20."),Object(r.b)(a.a,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"module",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'}),"import { NestjsQueryGraphQLModule } from '@nestjs-query/query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@nestjs-query/query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { AuthGuard } from '../auth.guard';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\nconst guards = [AuthGuard];\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        read: { defaultResultSize: 5, maxResultsSize: 20 },\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),Object(r.b)(i.a,{value:"resolver",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'}),"import { QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  read: { defaultResultSize: 5, maxResultsSize: 20 },\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"paging-strategy"},"Paging Strategy"),Object(r.b)("p",null,"By default ",Object(r.b)("inlineCode",{parentName:"p"},"nestjs-query")," uses a ",Object(r.b)("inlineCode",{parentName:"p"},"cursor")," based paging strategy and returns a ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://relay.dev/graphql/connections.htm"}),"connection")," for all query many endpoints."),Object(r.b)("p",null,"For a more in-depth overview of paging check out the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/nestjs-query/docs/graphql/paging"}),"paging docs")),Object(r.b)("p",null,"You can override the default ",Object(r.b)("inlineCode",{parentName:"p"},"pagingStrategy")," to one of the following alternatives"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"OFFSET")," - sets paging to allow ",Object(r.b)("inlineCode",{parentName:"li"},"limit")," and ",Object(r.b)("inlineCode",{parentName:"li"},"offset")," fields, and returns an ",Object(r.b)("inlineCode",{parentName:"li"},"ArrayConnection"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"NONE")," - turn off all paging and always return an ",Object(r.b)("inlineCode",{parentName:"li"},"ArrayConnection"),".")),Object(r.b)("p",null,"When using the ",Object(r.b)("inlineCode",{parentName:"p"},"OFFSET")," strategy your the paging arguments for a many query will accept a ",Object(r.b)("inlineCode",{parentName:"p"},"limit")," and/or ",Object(r.b)("inlineCode",{parentName:"p"},"offset"),". This will also change the return type from a ",Object(r.b)("inlineCode",{parentName:"p"},"CursorConnection")," to an ",Object(r.b)("inlineCode",{parentName:"p"},"ArrayConnection"),"."),Object(r.b)(a.a,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"module",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.module.ts" {14}',title:'"todo-item.module.ts"',"{14}":!0}),"import { NestjsQueryGraphQLModule, PagingStrategies } from '@nestjs-query/query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@nestjs-query/query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        pagingStrategy: PagingStrategies.OFFSET,\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),Object(r.b)(i.a,{value:"resolver",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts" {9}',title:'"todo-item.resolver.ts"',"{9}":!0}),"import { QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { CRUDResolver, PagingStrategies } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  pagingStrategy: PagingStrategies.OFFSET,\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),Object(r.b)("p",null,"To disable paging entirely you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"NONE")," ",Object(r.b)("inlineCode",{parentName:"p"},"pagingStrategy"),". When using ",Object(r.b)("inlineCode",{parentName:"p"},"NONE")," an ",Object(r.b)("inlineCode",{parentName:"p"},"ArrayConnection")," will be returned."),Object(r.b)(a.a,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"module",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.module.ts" {14}',title:'"todo-item.module.ts"',"{14}":!0}),"import { NestjsQueryGraphQLModule, PagingStrategies } from '@nestjs-query/query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@nestjs-query/query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        pagingStrategy: PagingStrategies.NONE,\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),Object(r.b)(i.a,{value:"resolver",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts" {9}',title:'"todo-item.resolver.ts"',"{9}":!0}),"import { QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { CRUDResolver, PagingStrategies } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  pagingStrategy: PagingStrategies.NONE,\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"paging-with-total-count"},"Paging with Total Count"),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This section ",Object(r.b)("strong",{parentName:"p"},"ONLY")," applies to ",Object(r.b)("inlineCode",{parentName:"p"},"CURSOR")," connections."))),Object(r.b)("div",{className:"admonition admonition-warning alert alert--danger"},Object(r.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"warning")),Object(r.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Enabling ",Object(r.b)("inlineCode",{parentName:"p"},"totalCount")," can be expensive. If your table is large the ",Object(r.b)("inlineCode",{parentName:"p"},"totalCount")," query may be expensive, use with caution."))),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(r.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"The ",Object(r.b)("inlineCode",{parentName:"p"},"totalCount")," field is not eagerly fetched. It will only be executed if the field is queried from the client."))),Object(r.b)("p",null,"When using the ",Object(r.b)("inlineCode",{parentName:"p"},"CURSOR")," paging strategy (the default) you have the option to expose a ",Object(r.b)("inlineCode",{parentName:"p"},"totalCount")," field to allow clients to fetch a total count of records in a connection."),Object(r.b)("p",null,"To enable the ",Object(r.b)("inlineCode",{parentName:"p"},"totalCount")," field for connections (including relations) in a resolver set the ",Object(r.b)("inlineCode",{parentName:"p"},"enableTotalCount")," option to ",Object(r.b)("inlineCode",{parentName:"p"},"true"),"."),Object(r.b)(a.a,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"module",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.module.ts" {14}',title:'"todo-item.module.ts"',"{14}":!0}),"import { NestjsQueryGraphQLModule, PagingStrategies } from '@nestjs-query/query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@nestjs-query/query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        enableTotalCount: true,\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),Object(r.b)(i.a,{value:"resolver",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts" {9}',title:'"todo-item.resolver.ts"',"{9}":!0}),"import { QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { CRUDResolver, PagingStrategies } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  enableTotalCount: true,\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),Object(r.b)("p",null,"When setting ",Object(r.b)("inlineCode",{parentName:"p"},"enableTotalCount")," to ",Object(r.b)("inlineCode",{parentName:"p"},"true")," you will be able to query for ",Object(r.b)("inlineCode",{parentName:"p"},"totalCount")," on ",Object(r.b)("inlineCode",{parentName:"p"},"cursor")," connections"),Object(r.b)(a.a,{defaultValue:"graphql",values:[{label:"GraphQL",value:"graphql"},{label:"Response",value:"response"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"graphql",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-graphql"}),"{\n  todoItems {\n    totalCount\n    pageInfo{\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        title\n        description\n      }\n    }\n  }\n}\n\n"))),Object(r.b)(i.a,{value:"response",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-json"}),'{\n  "data": {\n    "todoItems": {\n      "totalCount": 5,\n      "pageInfo": {\n        "hasNextPage": false,\n        "hasPreviousPage": false,\n        "startCursor": "YXJyYXljb25uZWN0aW9uOjA=",\n        "endCursor": "YXJyYXljb25uZWN0aW9uOjQ="\n      },\n      "edges": [\n        {\n          "node": {\n            "id": "1",\n            "title": "Create Nest App",\n            "description": null\n          }\n        },\n        {\n          "node": {\n            "id": "2",\n            "title": "Create Entity",\n            "description": null\n          }\n        },\n        {\n          "node": {\n            "id": "3",\n            "title": "Create Entity Service",\n            "description": null\n          }\n        },\n        {\n          "node": {\n            "id": "4",\n            "title": "Add Todo Item Resolver",\n            "description": null\n          }\n        },\n        {\n          "node": {\n            "id": "5",\n            "title": "How to create item With Sub Tasks",\n            "description": null\n          }\n        }\n      ]\n    }\n  }\n}\n')))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"default-sort"},"Default Sort"),Object(r.b)("p",null,"When querying the default sort is based on the persistence layer. You can override the default by providing the ",Object(r.b)("inlineCode",{parentName:"p"},"defaultSort")," option."),Object(r.b)("p",null,"In this example we specify the default sort to be by ",Object(r.b)("inlineCode",{parentName:"p"},"title"),"."),Object(r.b)(a.a,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"module",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'}),"import { SortDirection } from '@nestjs-query/core'\nimport { NestjsQueryGraphQLModule } from '@nestjs-query/query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@nestjs-query/query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { AuthGuard } from '../auth.guard';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\nconst guards = [AuthGuard];\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        read: { defaultSort: [{ field: 'title', direction: SortDirection.ASC }] },\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),Object(r.b)(i.a,{value:"resolver",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'}),"import { SortDirection, QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  read: { defaultSort: [{ field: 'title', direction: SortDirection.ASC }] },\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),Object(r.b)("h3",{id:"override-endpoint-name"},"Override Endpoint Name"),Object(r.b)("p",null,"If you find yourself in a situation where you want to override an endpoint name you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"one.name")," or ",Object(r.b)("inlineCode",{parentName:"p"},"many.name")," options to override"),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"These options are available for the ",Object(r.b)("inlineCode",{parentName:"p"},"create"),", ",Object(r.b)("inlineCode",{parentName:"p"},"read"),", ",Object(r.b)("inlineCode",{parentName:"p"},"update"),", and 'delete' endpoints."))),Object(r.b)("p",null,"In this example we'll change the ",Object(r.b)("inlineCode",{parentName:"p"},"todoItem")," query to ",Object(r.b)("inlineCode",{parentName:"p"},"findTodoItem")," and the ",Object(r.b)("inlineCode",{parentName:"p"},"todoItems")," endpoint to ",Object(r.b)("inlineCode",{parentName:"p"},"queryForTodoItems"),"."),Object(r.b)(a.a,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"module",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'}),"import { NestjsQueryGraphQLModule } from '@nestjs-query/query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@nestjs-query/query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        read: { one: { name: 'findTodoItem' }, many: { name: 'queryForTodoItems' } },\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),Object(r.b)(i.a,{value:"resolver",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'}),"import { QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  read: { one: { name: 'findTodoItem' }, many: { name: 'queryForTodoItems' } },\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),Object(r.b)("h2",{id:"individual-resolvers"},"Individual Resolvers"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"@nestjs-query/query-graphql")," package exposes each part of ",Object(r.b)("inlineCode",{parentName:"p"},"CRUD")," into individual mixins and resolvers allowing you\nto pick and choose what functionality you want to expose."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This is advanced usage of the resolvers API and is subject to change!"),Object(r.b)("ul",{parentName:"div"},Object(r.b)("li",{parentName:"ul"},"All examples below can be achieved with resolver options."),Object(r.b)("li",{parentName:"ul"},"The following resolvers do not expose relations options, to add relations options see ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"/nestjs-query/docs/graphql/relations#relatable"}),"Relateable"))))),Object(r.b)("h3",{id:"createresolver"},Object(r.b)("inlineCode",{parentName:"h3"},"CreateResolver")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"CreateResolver")," will only expose the ",Object(r.b)("inlineCode",{parentName:"p"},"createOne")," and ",Object(r.b)("inlineCode",{parentName:"p"},"createMany")," endpoints. The ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"#options"}),"options")," described for\n",Object(r.b)("inlineCode",{parentName:"p"},"create")," can be passed to the ",Object(r.b)("inlineCode",{parentName:"p"},"CreateResolver")),Object(r.b)("p",null,"For example the following resolver will expose the ",Object(r.b)("inlineCode",{parentName:"p"},"createOneTodoItem")," and ",Object(r.b)("inlineCode",{parentName:"p"},"createManyTodoItems")," mutations."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'}),"import { QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { CreateResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends CreateResolver(TodoItemDTO) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"readresolver"},Object(r.b)("inlineCode",{parentName:"h3"},"ReadResolver")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"ReadResolver")," will only expose the ",Object(r.b)("inlineCode",{parentName:"p"},"query")," and ",Object(r.b)("inlineCode",{parentName:"p"},"findById")," endpoints. The ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"#options"}),"options")," described for ",Object(r.b)("inlineCode",{parentName:"p"},"read"),"\ncan be passed to the ",Object(r.b)("inlineCode",{parentName:"p"},"ReadResolver")),Object(r.b)("p",null,"For example the following resolver will expose the ",Object(r.b)("inlineCode",{parentName:"p"},"todoItems")," and ",Object(r.b)("inlineCode",{parentName:"p"},"todoItem")," queries."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'}),"import { QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { ReadResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends ReadResolver(TodoItemDTO) {\n  constructor(\n    @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"updateresolver"},Object(r.b)("inlineCode",{parentName:"h3"},"UpdateResolver")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"UpdateResolver")," will only expose the ",Object(r.b)("inlineCode",{parentName:"p"},"updateOne")," and ",Object(r.b)("inlineCode",{parentName:"p"},"updateMany")," endpoints. The ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"#options"}),"options")," described for\n",Object(r.b)("inlineCode",{parentName:"p"},"update")," can be passed to the ",Object(r.b)("inlineCode",{parentName:"p"},"UpdateResolver")),Object(r.b)("p",null,"For example the following resolver will expose the ",Object(r.b)("inlineCode",{parentName:"p"},"updateOneTodoItem")," and ",Object(r.b)("inlineCode",{parentName:"p"},"updateManyTodoItems")," mutations."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'}),"import { QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { UpdateResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends UpdateResolver(TodoItemDTO) {\n  constructor(\n    @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"deleteresolver"},Object(r.b)("inlineCode",{parentName:"h3"},"DeleteResolver")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"DeleteResolver")," will only expose the ",Object(r.b)("inlineCode",{parentName:"p"},"deleteOne")," and ",Object(r.b)("inlineCode",{parentName:"p"},"deleteMany")," endpoints. The ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"#options"}),"options")," described for\n",Object(r.b)("inlineCode",{parentName:"p"},"delete")," can be passed to the ",Object(r.b)("inlineCode",{parentName:"p"},"DeleteResolver")),Object(r.b)("p",null,"For example the following resolver will expose the ",Object(r.b)("inlineCode",{parentName:"p"},"updateOneTodoItem")," and ",Object(r.b)("inlineCode",{parentName:"p"},"updateManyTodoItems")," mutations."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:'language-title="todo-item.resolver.ts"'}),"import { QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { DeleteResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends DeleteResolver(TodoItemDTO) {\n  constructor(\n    @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"custom-methods"},"Custom Methods"),Object(r.b)("p",null,"You can also create custom methods that build on the methods added by CRUDResolver."),Object(r.b)("p",null,"Lets create a new query endpoint that only returns completed ",Object(r.b)("inlineCode",{parentName:"p"},"TodoItems"),"."),Object(r.b)("p",null,"First create a file named ",Object(r.b)("inlineCode",{parentName:"p"},"types.ts"),". And add the following."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="types.ts"',title:'"types.ts"'}),"import { ConnectionType, QueryArgsType } from '@nestjs-query/query-graphql';\nimport { ArgsType } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\n\nexport const TodoItemConnection = ConnectionType(TodoItemDTO);\n\n@ArgsType()\nexport class TodoItemQuery extends QueryArgsType(TodoItemDTO) {}\n")),Object(r.b)("p",null,"In the code above we export two types. ",Object(r.b)("inlineCode",{parentName:"p"},"TodoItemConnection")," and ",Object(r.b)("inlineCode",{parentName:"p"},"TodoItemQuery"),". Because of the way ",Object(r.b)("inlineCode",{parentName:"p"},"@nestjs/graphql")," and\n",Object(r.b)("inlineCode",{parentName:"p"},"nest")," work we need to extend the ",Object(r.b)("inlineCode",{parentName:"p"},"QueryArgsType")," so that it will know the type to serialize into."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"NOTE")," ",Object(r.b)("inlineCode",{parentName:"p"},"ConnectionType")," will return the same Class each time you call it for a given type to prevent\nduplicate type errors when generating the graphql schema."),Object(r.b)("p",null,"In your resolver you can now create a new ",Object(r.b)("inlineCode",{parentName:"p"},"completedTodoItems")," method with the following:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'}),"import { Filter, QueryService, InjectQueryService } from '@nestjs-query/core';\nimport { ConnectionType, CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Args, Query, Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\nimport { TodoItemConnection, TodoItemQuery } from './types';\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO) {\n  constructor(@InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>) {\n    super(service);\n  }\n\n  // Set the return type to the TodoItemConnection\n  @Query(() => TodoItemConnection)\n  completedTodoItems(@Args() query: TodoItemQuery): Promise<ConnectionType<TodoItemDTO>> {\n    // add the completed filter the user provided filter\n    const filter: Filter<TodoItemDTO> = {\n      ...query.filter,\n      ...{ completed: { is: true } },\n    };\n\n    // call the original queryMany method with the new query\n    return this.queryMany({ ...query, ...{ filter } });\n  }\n}\n\n")),Object(r.b)("p",null,"Lets break this down so you know what is going on."),Object(r.b)("p",null,"In the above code we annotate the new method with"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"@Query(() => TodoItemConnection)\n")),Object(r.b)("p",null,"The return type passed to query lets graphql know what the generated schema type is."),Object(r.b)("p",null,"The next piece to pay attention to is"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"completedTodoItems(@Args() query: TodoItemQuery)\n")),Object(r.b)("p",null,"We use the ",Object(r.b)("inlineCode",{parentName:"p"},"TodoItemQuery")," we created for the arguments type and annotate with ",Object(r.b)("inlineCode",{parentName:"p"},"@Args")," when you look at the generated\nschema in it will look like."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-graphql"}),"completedTodoItems(\n  paging: CursorPaging = {}\n  filter: TodoItemFilter = {}\n  sorting: [TodoItemSort!] = []\n): TodoItemConnection!\n")),Object(r.b)("p",null,"Notice how there is not a query arg but instead the you see the fields of ",Object(r.b)("inlineCode",{parentName:"p"},"TodoItemQuery")," that is because we used\n",Object(r.b)("inlineCode",{parentName:"p"},"@Args")," without a name."),Object(r.b)("p",null,"The next piece is"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"// add the completed filter the user provided filter\nconst filter: Filter<TodoItemDTO> = {\n  ...query.filter,\n  ...{ completed: { is: true } },\n};\n")),Object(r.b)("p",null,"Here we do a shallow copy of the ",Object(r.b)("inlineCode",{parentName:"p"},"filter")," and add ",Object(r.b)("inlineCode",{parentName:"p"},"completed: { is: true }"),". This will override any completed arguments\nthat an end user may have provided to ensure we always query for completed todos."),Object(r.b)("p",null,"Finally we call the ",Object(r.b)("inlineCode",{parentName:"p"},"queryMany")," method from the ",Object(r.b)("inlineCode",{parentName:"p"},"CRUDResolver")," with the new filter set on the query."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"// call the original queryMany method with the new query\nreturn this.queryMany({ ...query, ...{ filter } });\n")),Object(r.b)("p",null,"The last step is to add the resolver to the module."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-items.module.ts"',title:'"todo-items.module.ts"'}),"import { Module } from '@nestjs/common';\nimport { NestjsQueryTypeOrmModule } from '@nestjs-query/query-typeorm';\nimport { TodoItemEntity } from './todo-item.entity';\nimport { TodoItemsResolver } from './todo-items.resolver';\n\n@Module({\n  providers: [TodoItemResolver],\n  imports: [\n    NestjsQueryTypeOrmModule.forFeature([TodoItemEntity]),\n  ],\n})\nexport class TodoItemsModule {}\n")))}p.isMDXComponent=!0},198:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=r.a.createContext({}),d=function(e){var t=r.a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return r.a.createElement(m.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=d(n),b=o,u=p["".concat(i,".").concat(b)]||p[b]||c[b]||a;return n?r.a.createElement(u,l(l({ref:t},m),{},{components:n})):r.a.createElement(u,l({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var m=2;m<a;m++)i[m]=n[m];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},199:function(e,t,n){"use strict";function o(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=o(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=o(e))&&(r&&(r+=" "),r+=t);return r}},200:function(e,t,n){"use strict";var o=n(0),r=n(201);t.a=function(){const e=Object(o.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},201:function(e,t,n){"use strict";var o=n(0);const r=Object(o.createContext)(void 0);t.a=r},202:function(e,t,n){"use strict";var o=n(0),r=n.n(o),a=n(200),i=n(199),l=n(47),s=n.n(l);const m=37,d=39;t.a=function(e){const{block:t,children:n,defaultValue:l,values:p,groupId:c,className:b}=e,{tabGroupChoices:u,setTabGroupChoices:j}=Object(a.a)(),[O,y]=Object(o.useState)(l),[h,v]=Object(o.useState)(!1);if(null!=c){const e=u[c];null!=e&&e!==O&&p.some((t=>t.value===e))&&y(e)}const g=e=>{y(e),null!=c&&j(c,e)},N=[],T=e=>{e.metaKey||e.altKey||e.ctrlKey||v(!0)},f=()=>{v(!1)};return Object(o.useEffect)((()=>(window.addEventListener("keydown",T),window.addEventListener("mousedown",f),()=>{window.removeEventListener("keydown",T),window.removeEventListener("mousedown",f)})),[]),r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":t},b)},p.map((({value:e,label:t})=>r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":O===e,className:Object(i.a)("tabs__item",s.a.tabItem,{"tabs__item--active":O===e}),style:h?{}:{outline:"none"},key:e,ref:e=>N.push(e),onKeyDown:e=>{((e,t,n)=>{switch(n.keyCode){case d:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case m:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(N,e.target,e),T(e)},onFocus:()=>g(e),onClick:()=>{g(e),v(!1)},onPointerDown:()=>v(!1)},t)))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},o.Children.toArray(n).filter((e=>e.props.value===O))[0]))}},203:function(e,t,n){"use strict";var o=n(0),r=n.n(o);t.a=function(e){return r.a.createElement("div",null,e.children)}}}]);