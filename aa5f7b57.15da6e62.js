/*! For license information please see aa5f7b57.15da6e62.js.LICENSE */
(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{122:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return d})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return u}));var a=n(1),r=n(6),i=(n(0),n(144)),o=n(149),c=n(150),l={title:"TypeOrmQueryService"},d={id:"typeorm/services",title:"TypeOrmQueryService",description:"import Tabs from '@theme/Tabs';",source:"@site/docs/typeorm/services.mdx",permalink:"/nestjs-query/docs/typeorm/services",editUrl:"https://github.com/doug-martin/nestjs-query/edit/master/website/docs/typeorm/services.mdx",sidebar:"docs",previous:{title:"Getting Started",permalink:"/nestjs-query/docs/typeorm/getting-started"},next:{title:"Getting Started",permalink:"/nestjs-query/docs/graphql/getting-started"}},p=[{value:"Querying",id:"querying",children:[{value:"Filtering",id:"filtering",children:[]},{value:"Sorting",id:"sorting",children:[]},{value:"Paging",id:"paging",children:[]},{value:"Find By Id",id:"find-by-id",children:[]},{value:"Get By Id",id:"get-by-id",children:[]}]},{value:"Creating",id:"creating",children:[{value:"Create One",id:"create-one",children:[]},{value:"Create Many",id:"create-many",children:[]}]},{value:"Updating",id:"updating",children:[{value:"Update One",id:"update-one",children:[]},{value:"Update Many",id:"update-many",children:[]}]},{value:"Deleting",id:"deleting",children:[{value:"Delete One",id:"delete-one",children:[]},{value:"Delete Many",id:"delete-many",children:[]}]},{value:"Custom Methods",id:"custom-methods",children:[]}],b={rightToc:p},s="wrapper";function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)(s,Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"TypeOrmQueryService")," is an implementation of the ",Object(i.b)("inlineCode",{parentName:"p"},"QueryService")," from the ",Object(i.b)("inlineCode",{parentName:"p"},"core")," package."),Object(i.b)("p",null,"All examples assume the following ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://typeorm.io/#/entities"}),"entity")," and DTO."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"NOTE")," In this example the DTO and entity are the same shape, if you have a case where they are different or have computed fields check out ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../concepts/assemblers"}),"Assemblers")," to understand how to convert to and from the DTO/Entity."),Object(i.b)(o.a,{defaultValue:"todoitementity",values:[{label:"TodoItemEntity",value:"todoitementity"},{label:"TodoItemDTO",value:"todoitemdto"}],mdxType:"Tabs"},Object(i.b)(c.a,{value:"todoitementity",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\n\n@Entity()\nexport class TodoItemEntity {\n  @PrimaryGeneratedColumn()\n  id!: string;\n\n  @Column()\n  title!: string;\n\n  @Column()\n  completed!: boolean;\n\n  @CreateDateColumn()\n  created!: Date;\n\n  @UpdateDateColumn()\n  updated!: Date;\n}\n\n"))),Object(i.b)(c.a,{value:"todoitemdto",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { FilterableField } from '@nestjs-query/query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from 'type-graphql';\n\n@ObjectType('TodoItem')\nexport class TodoItemDTO {\n  @FilterableField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n")))),Object(i.b)("p",null,"To create a typeorm service extend the ",Object(i.b)("inlineCode",{parentName:"p"},"TypeOrmQueryService")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Injectable } from '@nestjs/common';\nimport { TypeOrmQueryService } from '@nestjs-query/query-typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { TodoItemEntity } from './todo-item.entity';\nimport { TodoItemDTO } from './todo-item.dto';\n\n@QueryService(TodoItemDTO)\nexport class TodoItemService extends TypeOrmQueryService<TodoItemDTO, TodoItemEntity> {\n  constructor(\n    @InjectRepository(TodoItemEntity) repo: Repository<TodoItemEntity>,\n  ) {\n    super(repo);\n  }\n}\n\n")),Object(i.b)("p",null,"Notice how the ",Object(i.b)("inlineCode",{parentName:"p"},"TodoItemDTO")," is passed into ",Object(i.b)("inlineCode",{parentName:"p"},"@QueryService")," decorator, which registers this query service for the ",Object(i.b)("inlineCode",{parentName:"p"},"TodoItemDTO"),". This is used internally be the QueryService to know what type to translate the entity into when returning results."),Object(i.b)("h2",{id:"querying"},"Querying"),Object(i.b)("p",null,"To query for records from your service you can use the ",Object(i.b)("inlineCode",{parentName:"p"},"query")," method which will return a ",Object(i.b)("inlineCode",{parentName:"p"},"Promise")," of an array of entities. To read more about querying take a look at the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../concepts/queries"}),"Queries Doc"),"."),Object(i.b)("h4",{id:"example"},"Example"),Object(i.b)("p",null,"Get all records"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const records = await this.service.query({});\n")),Object(i.b)("h3",{id:"filtering"},"Filtering"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"filter")," option is translated to a ",Object(i.b)("inlineCode",{parentName:"p"},"WHERE")," clause in ",Object(i.b)("inlineCode",{parentName:"p"},"typeorm"),"."),Object(i.b)("h4",{id:"example-1"},"Example"),Object(i.b)("p",null,"To find all completed ",Object(i.b)("inlineCode",{parentName:"p"},"TodoItems")," by use can use the ",Object(i.b)("inlineCode",{parentName:"p"},"is")," operator."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const records = await this.service.query({\n   filter : {\n     completed: { is: true },\n   },\n});\n")),Object(i.b)("h3",{id:"sorting"},"Sorting"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"sorting")," option is translated to a ",Object(i.b)("inlineCode",{parentName:"p"},"ORDER BY"),"."),Object(i.b)("h4",{id:"example-2"},"Example"),Object(i.b)("p",null,"Sorting records by ",Object(i.b)("inlineCode",{parentName:"p"},"completed")," and ",Object(i.b)("inlineCode",{parentName:"p"},"title"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const records = await this.service.query({\n  sorting: [\n    {field: 'completed', direction: SortDirection.ASC},\n    {field: 'title', direction: SortDirection.DESC},\n  ],\n});\n")),Object(i.b)("h3",{id:"paging"},"Paging"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"paging")," option is translated to ",Object(i.b)("inlineCode",{parentName:"p"},"LIMIT")," and ",Object(i.b)("inlineCode",{parentName:"p"},"OFFSET"),"."),Object(i.b)("h4",{id:"example-3"},"Example"),Object(i.b)("p",null,"Skip the first 20 records and return the next 10."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const records = await this.service.query({\n  paging: {limit: 10, offset: 20},\n});\n")),Object(i.b)("h3",{id:"find-by-id"},"Find By Id"),Object(i.b)("p",null,"To find a single record you can use the ",Object(i.b)("inlineCode",{parentName:"p"},"findById")," method."),Object(i.b)("h4",{id:"example-4"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const records = await this.service.findById(1);\n")),Object(i.b)("h3",{id:"get-by-id"},"Get By Id"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"getById")," method is the same as the ",Object(i.b)("inlineCode",{parentName:"p"},"findById")," with one key difference, it will throw an exception if the record is not found."),Object(i.b)("h4",{id:"example-5"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"try {\n  const records = await this.service.getById(1);\n} catch (e) {\n  console.error('Unable to get record with id = 1');\n}\n")),Object(i.b)("h2",{id:"creating"},"Creating"),Object(i.b)("h3",{id:"create-one"},"Create One"),Object(i.b)("p",null,"To create a single record use the ",Object(i.b)("inlineCode",{parentName:"p"},"createOne")," method."),Object(i.b)("h4",{id:"example-6"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const createdRecord = await this.service.createOne({\n  title: 'Foo',\n  completed: false,\n});\n")),Object(i.b)("h3",{id:"create-many"},"Create Many"),Object(i.b)("p",null,"To create multiple records use the ",Object(i.b)("inlineCode",{parentName:"p"},"createMany")," method."),Object(i.b)("h4",{id:"example-7"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const createdRecords = await this.service.createMany([\n  { title: 'Foo', completed: false },\n  { title: 'Bar', completed: true },\n]);\n")),Object(i.b)("h2",{id:"updating"},"Updating"),Object(i.b)("h3",{id:"update-one"},"Update One"),Object(i.b)("p",null,"To update a single record use the ",Object(i.b)("inlineCode",{parentName:"p"},"updateOne")," method."),Object(i.b)("h4",{id:"example-8"},"Example"),Object(i.b)("p",null,"Updates the record with an id equal to 1 to completed."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const updatedRecord = await this.service.updateOne(1, { completed: true });\n")),Object(i.b)("h3",{id:"update-many"},"Update Many"),Object(i.b)("p",null,"To update multiple records use the ",Object(i.b)("inlineCode",{parentName:"p"},"updateMany")," method."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"NOTE")," This method returns a ",Object(i.b)("inlineCode",{parentName:"p"},"UpdateManyResponse")," which contains the updated record count."),Object(i.b)("h4",{id:"example-9"},"Example"),Object(i.b)("p",null,"Updates all ",Object(i.b)("inlineCode",{parentName:"p"},"TodoItemEntities")," to completed if their title ends in ",Object(i.b)("inlineCode",{parentName:"p"},"Bar")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const { updatedCount } = await this.service.updateMany(\n  {completed: true}, // update\n  {completed: {is: false}, title: {like: '%Bar'}} // filter\n);\n")),Object(i.b)("h2",{id:"deleting"},"Deleting"),Object(i.b)("h3",{id:"delete-one"},"Delete One"),Object(i.b)("p",null,"To delete a single record use the ",Object(i.b)("inlineCode",{parentName:"p"},"deleteOne")," method."),Object(i.b)("h4",{id:"example-10"},"Example"),Object(i.b)("p",null,"Delete the record with an id equal to 1."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const deletedRecord = await this.service.deleteOne(1);\n")),Object(i.b)("h3",{id:"delete-many"},"Delete Many"),Object(i.b)("p",null,"To delete multiple records use the ",Object(i.b)("inlineCode",{parentName:"p"},"deleteMany")," method."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"NOTE")," This method returns a ",Object(i.b)("inlineCode",{parentName:"p"},"DeleteManyResponse")," which contains the deleted record count."),Object(i.b)("h4",{id:"example-11"},"Example"),Object(i.b)("p",null,"Delete all ",Object(i.b)("inlineCode",{parentName:"p"},"TodoItemEntities")," older than ",Object(i.b)("inlineCode",{parentName:"p"},"Jan 1, 2019"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const { deletedCount } = await this.service.deleteMany(\n  { created: { lte: new Date('2019-1-1') } } // filter\n);\n")),Object(i.b)("h2",{id:"custom-methods"},"Custom Methods"),Object(i.b)("p",null,"You can also define other methods on your service class that encapsulates your business logic."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"async markAllAsCompleted(): Promise<number> {\n   const entities = await this.query({ filter: { completed: { is: true } } });\n\n   const { updatedCount } = await this.updateMany(\n     { completed: true }, // update\n     { id: { in: entities.map(e => e.id) } } // filter\n   );\n   // do some other business logic\n   return updatedCount;\n}\n")))}u.isMDXComponent=!0},144:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return O}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=r.a.createContext({}),p=function(e){var t=r.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},b=function(e){var t=p(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),b=p(n),s=a,m=b["".concat(o,".").concat(s)]||b[s]||u[s]||i;return n?r.a.createElement(m,c({ref:t},d,{components:n})):r.a.createElement(m,c({ref:t},d))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[s]="string"==typeof e?e:a,o[1]=c;for(var d=2;d<i;d++)o[d]=n[d];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},145:function(e,t,n){var a;!function(){"use strict";var n={}.hasOwnProperty;function r(){for(var e=[],t=0;t<arguments.length;t++){var a=arguments[t];if(a){var i=typeof a;if("string"===i||"number"===i)e.push(a);else if(Array.isArray(a)&&a.length){var o=r.apply(null,a);o&&e.push(o)}else if("object"===i)for(var c in a)n.call(a,c)&&a[c]&&e.push(c)}}return e.join(" ")}e.exports?(r.default=r,e.exports=r):void 0===(a=function(){return r}.apply(t,[]))||(e.exports=a)}()},149:function(e,t,n){"use strict";var a=n(0),r=n.n(a),i=n(145),o=n.n(i),c=n(84),l=n.n(c);const d={left:37,right:39};t.a=function(e){const{block:t,children:n,defaultValue:i,values:c}=e,[p,b]=Object(a.useState)(i),s=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:o()("tabs",{"tabs--block":t})},c.map(({value:e,label:t})=>r.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":p===e,className:o()("tab-item",l.a.tabItem,{"tab-item--active":p===e}),key:e,ref:e=>s.push(e),onKeyDown:e=>((e,t,n)=>{switch(n.keyCode){case d.right:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case d.left:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(s,e.target,e),onFocus:()=>b(e),onClick:()=>b(e)},t))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(n).filter(e=>e.props.value===p)[0]))}},150:function(e,t,n){"use strict";var a=n(0),r=n.n(a);t.a=function(e){return r.a.createElement("div",null,e.children)}}}]);