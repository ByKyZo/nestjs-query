(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{218:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),u=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},b=function(e){var t=u(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),b=u(n),d=a,m=b["".concat(l,".").concat(d)]||b[d]||c[d]||r;return n?o.a.createElement(m,p(p({ref:t},s),{},{components:n})):o.a.createElement(m,p({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,l[1]=p;for(var s=2;s<r;s++)l[s]=n[s];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},219:function(e,t,n){"use strict";function a(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(o&&(o+=" "),o+=t);return o}},220:function(e,t,n){"use strict";var a=n(0),o=n(221);t.a=function(){const e=Object(a.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},221:function(e,t,n){"use strict";var a=n(0);const o=Object(a.createContext)(void 0);t.a=o},222:function(e,t,n){"use strict";var a=n(0),o=n.n(a),r=n(220),l=n(219),p=n(56),i=n.n(p);const s=37,u=39;t.a=function(e){const{lazy:t,block:n,defaultValue:p,values:b,groupId:c,className:d}=e,{tabGroupChoices:m,setTabGroupChoices:y}=Object(r.a)(),[O,j]=Object(a.useState)(p),T=a.Children.toArray(e.children),g=[];if(null!=c){const e=m[c];null!=e&&e!==O&&b.some((t=>t.value===e))&&j(e)}const h=e=>{const t=e.target,n=g.indexOf(t),a=T[n].props.value;j(a),null!=c&&(y(c,a),setTimeout((()=>{(function(e){const{top:t,left:n,bottom:a,right:o}=e.getBoundingClientRect(),{innerHeight:r,innerWidth:l}=window;return t>=0&&o<=l&&a<=r&&n>=0})(t)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(i.a.tabItemActive),setTimeout((()=>t.classList.remove(i.a.tabItemActive)),2e3))}),150))},f=e=>{var t;let n;switch(e.keyCode){case u:{const t=g.indexOf(e.target)+1;n=g[t]||g[0];break}case s:{const t=g.indexOf(e.target)-1;n=g[t]||g[g.length-1];break}}null===(t=n)||void 0===t||t.focus()};return o.a.createElement("div",{className:"tabs-container"},o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":n},d)},b.map((({value:e,label:t})=>o.a.createElement("li",{role:"tab",tabIndex:O===e?0:-1,"aria-selected":O===e,className:Object(l.a)("tabs__item",i.a.tabItem,{"tabs__item--active":O===e}),key:e,ref:e=>g.push(e),onKeyDown:f,onFocus:h,onClick:h},t)))),t?Object(a.cloneElement)(T.filter((e=>e.props.value===O))[0],{className:"margin-vert--md"}):o.a.createElement("div",{className:"margin-vert--md"},T.map(((e,t)=>Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}},223:function(e,t,n){"use strict";var a=n(0),o=n.n(a);t.a=function({children:e,hidden:t,className:n}){return o.a.createElement("div",{role:"tabpanel",hidden:t,className:n},e)}},94:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return b}));var a=n(3),o=(n(0),n(218)),r=n(222),l=n(223);const p={title:"Types"},i={unversionedId:"graphql/types",id:"graphql/types",isDocsHomePage:!1,title:"Types",description:"@nestjs-query/query-graphql provides a number of types. Most will be automatically generated for you when you create a",source:"@site/docs/graphql/types.mdx",slug:"/graphql/types",permalink:"/nestjs-query/docs/graphql/types",editUrl:"https://github.com/doug-martin/nestjs-query/edit/master/documentation/docs/graphql/types.mdx",version:"current",sidebar:"docs",previous:{title:"Relations",permalink:"/nestjs-query/docs/graphql/relations"},next:{title:"Federation",permalink:"/nestjs-query/docs/graphql/federation"}},s=[{value:"ArgsTypes",id:"argstypes",children:[{value:"QueryArgsType",id:"queryargstype",children:[]}]},{value:"ObjectTypes",id:"objecttypes",children:[{value:"ConnectionType",id:"connectiontype",children:[]},{value:"UpdateManyResponseType",id:"updatemanyresponsetype",children:[]},{value:"DeleteManyResponseType",id:"deletemanyresponsetype",children:[]}]},{value:"InputTypes",id:"inputtypes",children:[{value:"FilterType",id:"filtertype",children:[]},{value:"SortType",id:"sorttype",children:[]},{value:"CreateOneInputType",id:"createoneinputtype",children:[]},{value:"CreateManyInputType",id:"createmanyinputtype",children:[]},{value:"UpdateOneInputType",id:"updateoneinputtype",children:[]},{value:"UpdateManyInputType",id:"updatemanyinputtype",children:[]},{value:"DeleteOneInputType",id:"deleteoneinputtype",children:[]},{value:"DeleteManyInputType",id:"deletemanyinputtype",children:[]}]}],u={toc:s};function b({components:e,...t}){return Object(o.b)("wrapper",Object(a.a)({},u,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"@nestjs-query/query-graphql")," provides a number of types. Most will be automatically generated for you when you create a\nresolver. However, you can use many of the types in your own code for custom endpoints."),Object(o.b)("p",null,"The following examples are based on the following ",Object(o.b)("inlineCode",{parentName:"p"},"TodoItemDTO")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { FilterableField } from '@nestjs-query/query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\nexport class TodoItemDTO {\n  @FilterableField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n")),Object(o.b)("h2",{id:"argstypes"},"ArgsTypes"),Object(o.b)("h3",{id:"queryargstype"},"QueryArgsType"),Object(o.b)("p",null,"Args type used in ",Object(o.b)("inlineCode",{parentName:"p"},"read")," endpoints to allow ",Object(o.b)("inlineCode",{parentName:"p"},"filtering"),", ",Object(o.b)("inlineCode",{parentName:"p"},"paging"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"sorting"),"."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"QueryArgsType")," will generate an ",Object(o.b)("inlineCode",{parentName:"p"},"ArgsType")," that will require the user to provide three arguments."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"filter?")," - A filter that should be used to find records to update. See ",Object(o.b)("a",{parentName:"li",href:"#filtertype"},"FilterType")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"paging?")," - Options to page of result."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"sorting?")," - Optional array to allow sorting of results. See ",Object(o.b)("a",{parentName:"li",href:"#sorttype"},"SortType"),".")),Object(o.b)("h4",{id:"usage"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { QueryArgsType } from '@nestjs-query/query-graphql';\nimport { ArgsType } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\n\n@ArgsType()\nexport class TodoItemQuery extends QueryArgsType(TodoItemDTO) {}\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"objecttypes"},"ObjectTypes"),Object(o.b)("h3",{id:"connectiontype"},"ConnectionType"),Object(o.b)("p",null,"Implementation of ",Object(o.b)("a",{parentName:"p",href:"https://facebook.github.io/relay/graphql/connections.htm"},"connections"),". Useful for large result sets\nwhere the end user should be able to page through the results."),Object(o.b)("h4",{id:"usage-1"},"Usage"),Object(o.b)(r.a,{defaultValue:"code",values:[{label:"Code",value:"code"},{label:"Schema",value:"schema"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"code",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { QueryArgsType } from '@nestjs-query/query-graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\n\nexport const TodoItemQueryArgs = QueryArgsType(TodoItemDTO)\nexport const TodoItemConnection = TodoItemQueryArgs.ConnectionType;\n"))),Object(o.b)(l.a,{value:"schema",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-graphql"},"scalar ConnectionCursor\n\ntype TodoItemConnection {\n  pageInfo: PageInfo!\n  edges: [TodoItemEdge!]!\n}\n\ntype TodoItemEdge {\n  node: TodoItem!\n  cursor: ConnectionCursor!\n}\n\ntype PageInfo {\n  hasNextPage: Boolean\n  hasPreviousPage: Boolean\n  startCursor: ConnectionCursor\n  endCursor: ConnectionCursor\n}\n")))),Object(o.b)("hr",null),Object(o.b)("h3",{id:"updatemanyresponsetype"},"UpdateManyResponseType"),Object(o.b)("p",null,"Response from ",Object(o.b)("inlineCode",{parentName:"p"},"updateMany")," mutations."),Object(o.b)("h4",{id:"usage-2"},"Usage"),Object(o.b)(r.a,{defaultValue:"code",values:[{label:"Code",value:"code"},{label:"Schema",value:"schema"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"code",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { UpdateManyResponseType } from '@nestjs-query/query-graphql';\n\nexport const UpdateManyResponse = UpdateManyResponseType()\n"))),Object(o.b)(l.a,{value:"schema",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-graphql"},"type UpdateManyResponse {\n  updatedCount: Int!\n}\n")))),Object(o.b)("hr",null),Object(o.b)("h3",{id:"deletemanyresponsetype"},"DeleteManyResponseType"),Object(o.b)("p",null,"Response from ",Object(o.b)("inlineCode",{parentName:"p"},"deleteMany")," mutations."),Object(o.b)("h4",{id:"usage-3"},"Usage"),Object(o.b)(r.a,{defaultValue:"code",values:[{label:"Code",value:"code"},{label:"Schema",value:"schema"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"code",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { DeleteManyResponseType } from '@nestjs-query/query-graphql';\n\nexport const UpdateManyResponse = DeleteManyResponseType()\n"))),Object(o.b)(l.a,{value:"schema",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-graphql"},"type DeleteManyResponse {\n  deletedCount: Int!\n}\n")))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"inputtypes"},"InputTypes"),Object(o.b)("h3",{id:"filtertype"},"FilterType"),Object(o.b)("p",null,"GraphQL implementation of the ",Object(o.b)("inlineCode",{parentName:"p"},"@nestjs-query/core")," ",Object(o.b)("inlineCode",{parentName:"p"},"Filter")," type."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"FilterType")," is dynamically created based on the fields in the ",Object(o.b)("inlineCode",{parentName:"p"},"DTO")," annotated with ",Object(o.b)("a",{parentName:"p",href:"/nestjs-query/docs/graphql/dtos#filterablefield"},"@FilterableField"),"."),Object(o.b)("p",null,"Along with the dynamically create fields filter also has the following static fields:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"and")," - Allows for joining multiple ",Object(o.b)("inlineCode",{parentName:"p"},"Filters")," with using an ",Object(o.b)("inlineCode",{parentName:"p"},"AND")," condition."),Object(o.b)("p",{parentName:"li"},"For example, find all todo items that ",Object(o.b)("inlineCode",{parentName:"p"},"start with 'Foo' AND end in 'Bar'"),"."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-graphql"},'todoItems(filter: {\n  and: [\n    {title: {like: "Foo%"}},\n    {title: {like: "%Bar"}},\n  ]\n}) {\n  #...select your fields\n}\n'))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"or")," - Allows for joining multiple ",Object(o.b)("inlineCode",{parentName:"p"},"Filters")," using an ",Object(o.b)("inlineCode",{parentName:"p"},"OR")," condition."),Object(o.b)("p",{parentName:"li"},"  For example, find all todo items that ",Object(o.b)("inlineCode",{parentName:"p"},"(are completed AND start with 'Foo') OR (are not completed and end in 'Bar')"),"."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-graphql"},'todoItems(filter: {\n  or: [\n    {title: {eq: "Foo"}, completed: {is: true}},\n    {title: {eq: "Bar"}, completed: {is: false}},\n  ]\n}) {\n  #...select your fields\n}\n')))),Object(o.b)(r.a,{defaultValue:"code",values:[{label:"Code",value:"code"},{label:"Schema",value:"schema"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"code",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { FilterType } from '@nestjs-query/query-graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\n\nexport const TodoItemFilter = FilterType(TodoItemDTO)\n"))),Object(o.b)(l.a,{value:"schema",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-graphql"},"input TodoItemFilter {\n  and: [TodoItemFilter!]\n  or: [TodoItemFilter!]\n  id: IDFilterComparison\n  title: StringFieldComparison\n  completed: BooleanFieldComparison\n  created: DateFieldComparison\n  updated: DateFieldComparison\n}\n\ninput IDFilterComparison {\n  is: Boolean\n  isNot: Boolean\n  eq: ID\n  neq: ID\n  gt: ID\n  gte: ID\n  lt: ID\n  lte: ID\n  like: ID\n  notLike: ID\n  iLike: ID\n  notILike: ID\n  in: [ID!]\n  notIn: [ID!]\n}\n\ninput StringFieldComparison {\n  is: Boolean\n  isNot: Boolean\n  eq: String\n  neq: String\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  like: String\n  notLike: String\n  iLike: String\n  notILike: String\n  in: [String!]\n  notIn: [String!]\n}\n\ninput BooleanFieldComparison {\n  is: Boolean\n  isNot: Boolean\n}\n\ninput DateFieldComparison {\n  is: Boolean\n  isNot: Boolean\n  eq: DateTime\n  neq: DateTime\n  gt: DateTime\n  gte: DateTime\n  lt: DateTime\n  lte: DateTime\n  in: [DateTime!]\n  notIn: [DateTime!]\n}\n")))),Object(o.b)("hr",null),Object(o.b)("h3",{id:"sorttype"},"SortType"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"SortType")," allows you to sort results."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE")," This type is automatically created when using ",Object(o.b)("a",{parentName:"p",href:"#queryargstype"},"QueryArgsType"),"."),Object(o.b)("p",null,"For more comprehensive examples take a look at the ",Object(o.b)("a",{parentName:"p",href:"/nestjs-query/docs/graphql/queries#sorting"},"Sorting Docs")),Object(o.b)("h4",{id:"fields"},"Fields"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"field")," - The field to sort on. The is an ENUM of ",Object(o.b)("a",{parentName:"li",href:"/nestjs-query/docs/graphql/dtos#filterablefield"},"@FilterableFields")," defined in the DTO."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"direction")," - The direction to sort the field ",Object(o.b)("inlineCode",{parentName:"li"},"ASC")," or ",Object(o.b)("inlineCode",{parentName:"li"},"DESC"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"nulls?")," - On supported storage engines you can specify the null sort order ",Object(o.b)("inlineCode",{parentName:"li"},"NULLS_FIRST"),", ",Object(o.b)("inlineCode",{parentName:"li"},"NULLS_LAST"))),Object(o.b)(r.a,{defaultValue:"code",values:[{label:"Code",value:"code"},{label:"Schema",value:"schema"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"code",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { QueryArgsType } from '@nestjs-query/query-graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\n\nexport const TodoItemQueryArgs = QueryArgsType(TodoItemDTO)\nexport const TodoItemSort = TodoItemQueryArgs.SortType;\n"))),Object(o.b)(l.a,{value:"schema",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-graphql"},"input TodoItemSort {\n  field: TodoItemSortFields!\n  direction: SortDirection!\n  nulls: SortNulls\n}\n\nenum TodoItemSortFields {\n  id\n  title\n  completed\n  created\n  updated\n}\n\nenum SortDirection {\n  ASC\n  DESC\n}\n\nenum SortNulls {\n  NULLS_FIRST\n  NULLS_LAST\n}\n\n")))),Object(o.b)("hr",null),Object(o.b)("h3",{id:"createoneinputtype"},"CreateOneInputType"),Object(o.b)("p",null,"Input type for ",Object(o.b)("inlineCode",{parentName:"p"},"createOne")," mutations."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE")," Dont forget to annotate your DTO with ",Object(o.b)("inlineCode",{parentName:"p"},"@InputType()")," from ",Object(o.b)("inlineCode",{parentName:"p"},"@nestjs/graphql"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE")," Your DTO should be one that you want to use for input. For example you may not want to let the end user to\nspecify the ",Object(o.b)("inlineCode",{parentName:"p"},"created")," or ",Object(o.b)("inlineCode",{parentName:"p"},"updated")," fields so you would create a new DTO just for input."),Object(o.b)("h4",{id:"usage-4"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { CreateOneInputType } from '@nestjs-query/query-graphql';\nimport { InputType } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\n\n@InputType('TodoItemInput')\nexport class TodoItemInputDTO {\n  @IsString()\n  @Field({nullable: true})\n  title?: string;\n\n  @IsBoolean()\n  @Field({nullable: true})\n  completed?: string;\n}\n\n@InputType()\nexport class CreateOneTodoItemInput extends CreateOneInputType('todoItem', TodoItemInputDTO) {}\n")),Object(o.b)("hr",null),Object(o.b)("h3",{id:"createmanyinputtype"},"CreateManyInputType"),Object(o.b)("p",null,"Input type for ",Object(o.b)("inlineCode",{parentName:"p"},"createMany")," mutations."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE")," Dont forget to annotate your DTO with ",Object(o.b)("inlineCode",{parentName:"p"},"@InputType()")," from ",Object(o.b)("inlineCode",{parentName:"p"},"@nestjs/graphql"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE")," Your DTO should be one that you want to use for input. For example you may not want to let the end user to\nspecify the ",Object(o.b)("inlineCode",{parentName:"p"},"created")," or ",Object(o.b)("inlineCode",{parentName:"p"},"updated")," fields so you would create a new DTO just for input."),Object(o.b)("h4",{id:"usage-5"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { CreateManyInputType } from '@nestjs-query/query-graphql';\nimport { InputType } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\n\n@InputType('TodoItemInput')\nexport class TodoItemInputDTO {\n  @IsString()\n  @Field({nullable: true})\n  title?: string;\n\n  @IsBoolean()\n  @Field({nullable: true})\n  completed?: string;\n}\n\n@InputType()\nexport class CreateManyTodoItemsInput extends CreateManyInputType('todoItems', TodoItemInputDTO) {}\n")),Object(o.b)("h3",{id:"updateoneinputtype"},"UpdateOneInputType"),Object(o.b)("p",null,"InputType type for ",Object(o.b)("inlineCode",{parentName:"p"},"updateOne")," mutations."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"UpdateOneInputType")," will generate an ",Object(o.b)("inlineCode",{parentName:"p"},"InputType")," that will require the user to provide two fields."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"id")," - The id of the record to update"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"update")," - A record with fields to update.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE")," Dont forget to annotate your DTO with ",Object(o.b)("inlineCode",{parentName:"p"},"@InputType()")," from ",Object(o.b)("inlineCode",{parentName:"p"},"@nestjs/graphql"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE")," Your DTO should be one that you want to use for updates. For example you may not want to let the end user to\nupdate the ",Object(o.b)("inlineCode",{parentName:"p"},"created")," or ",Object(o.b)("inlineCode",{parentName:"p"},"updated")," fields so you would create a new DTO just for updates."),Object(o.b)("h4",{id:"usage-6"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { UpdateOneInputType } from '@nestjs-query/query-graphql';\nimport { InputType } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\n\n@InputType('TodoItemUpdateInput')\nexport class TodoItemUpdateDTO {\n  @IsOptional()\n  @IsString()\n  @Field({ nullable: true })\n  title?: string;\n\n  @IsOptional()\n  @IsBoolean()\n  @Field({ nullable: true })\n  completed?: boolean;\n}\n\n@InputType()\nexport class UpdateOneTodoItemInput extends UpdateOneInputType(TodoItemUpdateDTO) {}\n")),Object(o.b)("hr",null),Object(o.b)("h3",{id:"updatemanyinputtype"},"UpdateManyInputType"),Object(o.b)("p",null,"Input type for ",Object(o.b)("inlineCode",{parentName:"p"},"updateMany")," mutations."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"UpdateOneInputType")," will generate an ",Object(o.b)("inlineCode",{parentName:"p"},"InputType")," that will require the user to provide two arguments."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"filter")," - The filter that should be used to find records to update. See ",Object(o.b)("a",{parentName:"li",href:"#filtertype"},"FilterType")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"update")," - The update to apply to each record found.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE")," Dont forget to annotate your DTO with ",Object(o.b)("inlineCode",{parentName:"p"},"@InputType()")," from ",Object(o.b)("inlineCode",{parentName:"p"},"@nestjs/graphql"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE")," Your DTO should be one that you want to use for input. For example you may not want to let the end user to\nspecify the ",Object(o.b)("inlineCode",{parentName:"p"},"created")," or ",Object(o.b)("inlineCode",{parentName:"p"},"updated")," fields so you would create a new DTO just for input."),Object(o.b)("h4",{id:"usage-7"},"Usage"),Object(o.b)("p",null,"In this example we use the read DTO for the FilterType, and a different update DTO."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { CreateOneInputType, FilterType } from '@nestjs-query/query-graphql';\nimport { InputType } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\n\n@InputType('TodoItemUpdate')\nexport class TodoItemUpdateDTO {\n  @IsOptional()\n  @IsString()\n  @Field({ nullable: true })\n  title?: string;\n\n  @IsOptional()\n  @IsBoolean()\n  @Field({ nullable: true })\n  completed?: boolean;\n}\n\n@InputType()\nexport class UpdateManyTodoItemsInput extends UpdateManyInputType(\n  TodoItemDTO, // filter\n  TodoItemUpdateDTO // update DTO\n) {}\n")),Object(o.b)("hr",null),Object(o.b)("h3",{id:"deleteoneinputtype"},"DeleteOneInputType"),Object(o.b)("p",null,"InputType type for ",Object(o.b)("inlineCode",{parentName:"p"},"deleteOne")," mutations."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"DeleteOneInputType")," will generate an ",Object(o.b)("inlineCode",{parentName:"p"},"InputType")," that will require the user to provide the id of the record to delete."),Object(o.b)("h4",{id:"usage-8"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { DeleteOneInputType } from '@nestjs-query/query-graphql';\nimport { InputType } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\n\n@InputType()\nexport class DeleteOneInput extends DeleteOneInputType() {}\n")),Object(o.b)("hr",null),Object(o.b)("h3",{id:"deletemanyinputtype"},"DeleteManyInputType"),Object(o.b)("p",null,"Input type type for ",Object(o.b)("inlineCode",{parentName:"p"},"deleteMany")," mutations."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"DeleteManyInputType")," will generate an ",Object(o.b)("inlineCode",{parentName:"p"},"InputType")," that will require the user to provide:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"filter")," - A filter used to find records to delete. See ",Object(o.b)("a",{parentName:"li",href:"#filtertype"},"FilterType"))),Object(o.b)("h4",{id:"usage-9"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { CreateOneInputType, FilterType } from '@nestjs-query/query-graphql';\nimport { InputType } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\n\n@InputType()\nexport class DeleteManyTodoItemsInput extends DeleteManyInputType(TodoItemDTO) {}\n")))}b.isMDXComponent=!0}}]);