(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6578],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return c}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=d(n),c=l,h=m["".concat(p,".").concat(c)]||m[c]||s[c]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8215:function(e,t,n){"use strict";var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,l=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:l},t)}},5064:function(e,t,n){"use strict";n.d(t,{Z:function(){return s}});var a=n(7294),l=n(9443);var r=function(){var e=(0,a.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=n(6010),i="tabItem_1uMI",p="tabItemActive_2DSg";var d=37,u=39;var s=function(e){var t=e.lazy,n=e.block,l=e.defaultValue,s=e.values,m=e.groupId,c=e.className,h=r(),k=h.tabGroupChoices,f=h.setTabGroupChoices,T=(0,a.useState)(l),g=T[0],y=T[1],v=a.Children.toArray(e.children),b=[];if(null!=m){var N=k[m];null!=N&&N!==g&&s.some((function(e){return e.value===N}))&&y(N)}var C=function(e){var t=e.currentTarget,n=b.indexOf(t),a=s[n].value;y(a),null!=m&&(f(m,a),setTimeout((function(){var e,n,a,l,r,o,i,d;(e=t.getBoundingClientRect(),n=e.top,a=e.left,l=e.bottom,r=e.right,o=window,i=o.innerHeight,d=o.innerWidth,n>=0&&r<=d&&l<=i&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(p),setTimeout((function(){return t.classList.remove(p)}),2e3))}),150))},O=function(e){var t,n;switch(e.keyCode){case u:var a=b.indexOf(e.target)+1;n=b[a]||b[0];break;case d:var l=b.indexOf(e.target)-1;n=b[l]||b[b.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},c)},s.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:g===t?0:-1,"aria-selected":g===t,className:(0,o.Z)("tabs__item",i,{"tabs__item--active":g===t}),key:t,ref:function(e){return b.push(e)},onKeyDown:O,onFocus:C,onClick:C},n)}))),t?(0,a.cloneElement)(v.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==g})}))))}},9443:function(e,t,n){"use strict";var a=(0,n(7294).createContext)(void 0);t.Z=a},1391:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return m},default:function(){return h}});var a=n(2122),l=n(9756),r=(n(7294),n(3905)),o=n(5064),i=n(8215),p=["components"],d={title:"Mutations"},u=void 0,s={unversionedId:"graphql/mutations",id:"graphql/mutations",isDocsHomePage:!1,title:"Mutations",description:"The CRUDResolver automatically exposes six mutation endpoints. The endpoints names will be derived",source:"@site/docs/graphql/mutations.mdx",sourceDirName:"graphql",slug:"/graphql/mutations",permalink:"/nestjs-query/docs/graphql/mutations",editUrl:"https://github.com/doug-martin/nestjs-query/edit/master/documentation/docs/graphql/mutations.mdx",version:"current",frontMatter:{title:"Mutations"},sidebar:"docs",previous:{title:"Queries",permalink:"/nestjs-query/docs/graphql/queries"},next:{title:"Paging",permalink:"/nestjs-query/docs/graphql/paging"}},m=[{value:"Create One",id:"create-one",children:[]},{value:"Create Many",id:"create-many",children:[]},{value:"Update One",id:"update-one",children:[]},{value:"Update Many",id:"update-many",children:[]},{value:"Delete One",id:"delete-one",children:[]},{value:"Delete Many",id:"delete-many",children:[]}],c={toc:m};function h(e){var t=e.components,n=(0,l.Z)(e,p);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/nestjs-query/docs/graphql/resolvers"},"CRUDResolver")," automatically exposes six mutation endpoints. The endpoints names will be derived\nfrom name provided to ",(0,r.kt)("inlineCode",{parentName:"p"},"@ObjectType")," or the class name."),(0,r.kt)("p",null,"The following examples are based on the following ",(0,r.kt)("inlineCode",{parentName:"p"},"TodoItemDTO")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.dto.ts"',title:'"todo-item.dto.ts"'},"import { FilterableField, IDField } from '@nestjs-query/query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n")),(0,r.kt)("p",null,"In the following examples you will see the following endpoints referenced"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"createOneTodoItem")," - graphql endpoint to create a single record.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"createManyTodoItems")," - graphql endpoint to create multiple records,")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"updateOneTodoItem")," - graphql endpoint to update a single record by id.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"updateManyTodoItems")," - graphql endpoint update multiple records with a filter,")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"deleteOneTodoItem")," - graphql endpoint to delete one record by id.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"deleteManyTodoItems")," - graphql endpoint to delete multiple records with a filter."))),(0,r.kt)("h3",{id:"create-one"},"Create One"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CRUDResolver")," will by default expose a ",(0,r.kt)("inlineCode",{parentName:"p"},"createOne")," mutation using the name of the DTO to name the mutation."),(0,r.kt)("p",null,"In this example we create a single ",(0,r.kt)("inlineCode",{parentName:"p"},"TodoItem"),", the input by default will be a ",(0,r.kt)("inlineCode",{parentName:"p"},"Partial")," of the DTO."),(0,r.kt)(o.Z,{defaultValue:"graphql",values:[{label:"GraphQL",value:"graphql"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"graphql",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  createOneTodoItem(\n    input: { todoItem: { title: "Create One Todo Item", completed: false } }\n  ) {\n    id\n    title\n    completed\n    created\n    updated\n  }\n}\n'))),(0,r.kt)(i.Z,{value:"response",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createOneTodoItem": {\n      "id": "1",\n      "title": "Create One Todo Item",\n      "completed": false,\n      "created": "2020-01-14T09:01:35.834Z",\n      "updated": "2020-01-14T09:01:35.834Z"\n    }\n  }\n}\n')))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"create-many"},"Create Many"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CRUDResolver")," will by default expose a ",(0,r.kt)("inlineCode",{parentName:"p"},"createMany")," mutation using the name of the DTO to name the mutation."),(0,r.kt)("p",null,"In this example we create multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"TodoItems"),", the each record is a ",(0,r.kt)("inlineCode",{parentName:"p"},"Partial")," of the DTO."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"The following example creates two ",(0,r.kt)("inlineCode",{parentName:"p"},"TodoItems"),"."),(0,r.kt)(o.Z,{defaultValue:"graphql",values:[{label:"GraphQL",value:"graphql"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"graphql",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  createManyTodoItems(\n    input: {\n      todoItems: [\n        { title: "Create Many Todo Items - 1", completed: false }\n        { title: "Create Many Todo Items - 2", completed: true }\n      ]\n    }\n  ) {\n    id\n    title\n    completed\n    created\n    updated\n  }\n}\n'))),(0,r.kt)(i.Z,{value:"response",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createManyTodoItems": [\n      {\n        "id": "2",\n        "title": "Create Many Todo Items - 1",\n        "completed": false,\n        "created": "2020-01-14T09:01:55.110Z",\n        "updated": "2020-01-14T09:01:55.110Z"\n      },\n      {\n        "id": "3",\n        "title": "Create Many Todo Items - 2",\n        "completed": true,\n        "created": "2020-01-14T09:01:55.110Z",\n        "updated": "2020-01-14T09:01:55.110Z"\n      }\n    ]\n  }\n}\n')))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"update-one"},"Update One"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CRUDResolver")," will by default expose an ",(0,r.kt)("inlineCode",{parentName:"p"},"updateOne")," mutation that takes two fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id"),": The id of the record to update."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"update"),": The values to update on the record. This is a partial so you only have to pass in the values you want to\nchange.")),(0,r.kt)("h4",{id:"examples-1"},"Examples"),(0,r.kt)("p",null,"The following example updates the record with ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"completed=true")),(0,r.kt)(o.Z,{defaultValue:"graphql",values:[{label:"GraphQL",value:"graphql"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"graphql",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation {\n  updateOneTodoItem(input: { id: 1, update: { completed: true } }) {\n    id\n    title\n    completed\n    created\n    updated\n  }\n}\n"))),(0,r.kt)(i.Z,{value:"response",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "updateOneTodoItem": {\n      "id": "1",\n      "title": "Create One Todo Item",\n      "completed": true,\n      "created": "2020-01-14T07:00:31.763Z",\n      "updated": "2020-01-14T09:02:28.167Z"\n    }\n  }\n}\n')))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"update-many"},"Update Many"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CRUDResolver")," will by default expose an ",(0,r.kt)("inlineCode",{parentName:"p"},"updateMany")," mutation that takes two fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"filter"),": The filter to use to find the records to update.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"NOTE")," The filter ",(0,r.kt)("strong",{parentName:"li"},"CANNOT")," be an empty object. This prevents accidental updating of all records."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"update"),": The values to update on the record. This is a partial so you only have to pass in the values you want to\nchange.")),(0,r.kt)("p",null,"The response contains the number of records updated."),(0,r.kt)("h4",{id:"examples-2"},"Examples"),(0,r.kt)("p",null,"The following example updates records with an ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," equal to 1 or 2 to ",(0,r.kt)("inlineCode",{parentName:"p"},"completed=true"),"."),(0,r.kt)(o.Z,{defaultValue:"graphql",values:[{label:"GraphQL",value:"graphql"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"graphql",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation {\n  updateManyTodoItems(\n    input: { filter: { id: { in: [1, 2] } }, update: { completed: true } }\n  ) {\n    updatedCount\n  }\n}\n"))),(0,r.kt)(i.Z,{value:"response",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "updateManyTodoItems": {\n      "updatedCount": 2\n    }\n  }\n}\n')))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"delete-one"},"Delete One"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CRUDResolver")," will by default expose a ",(0,r.kt)("inlineCode",{parentName:"p"},"deleteOne")," mutation that allows you to delete a record by id:"),(0,r.kt)("h4",{id:"examples-3"},"Examples"),(0,r.kt)("p",null,"The following example deletes the record with an id equal to 1."),(0,r.kt)(o.Z,{defaultValue:"graphql",values:[{label:"GraphQL",value:"graphql"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"graphql",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation {\n  deleteOneTodoItem(input: { id: 1 }) {\n    id\n    title\n    completed\n    created\n    updated\n  }\n}\n"))),(0,r.kt)(i.Z,{value:"response",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "deleteOneTodoItem": {\n      "title": "Create One Todo Item",\n      "completed": true,\n      "created": "2020-01-14T07:00:31.763Z",\n      "updated": "2020-01-14T09:02:51.429Z"\n    }\n  }\n}\n')))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"delete-many"},"Delete Many"),(0,r.kt)("p",null,"The CRUDResolver will by default expose a ",(0,r.kt)("inlineCode",{parentName:"p"},"deleteMany")," mutation that takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"filter"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE")," The filter ",(0,r.kt)("strong",{parentName:"p"},"CANNOT")," be an empty object. This prevents accidental deletion of all records."),(0,r.kt)("h4",{id:"examples-4"},"Examples"),(0,r.kt)("p",null,"The following example deletes all records that start with ",(0,r.kt)("inlineCode",{parentName:"p"},"Create Many Todo Items"),"."),(0,r.kt)(o.Z,{defaultValue:"graphql",values:[{label:"GraphQL",value:"graphql"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"graphql",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  deleteManyTodoItems(\n    input: { filter: { title: { like: "Create Many Todo Items%" } } }\n  ) {\n    deletedCount\n  }\n}\n'))),(0,r.kt)(i.Z,{value:"response",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "deleteManyTodoItems": {\n      "deletedCount": 6\n    }\n  }\n}\n')))))}h.isMDXComponent=!0},6010:function(e,t,n){"use strict";function a(e){var t,n,l="";if("string"==typeof e||"number"==typeof e)l+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(l&&(l+=" "),l+=n);else for(t in e)e[t]&&(l&&(l+=" "),l+=t);return l}function l(){for(var e,t,n=0,l="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(l&&(l+=" "),l+=t);return l}n.d(t,{Z:function(){return l}})}}]);