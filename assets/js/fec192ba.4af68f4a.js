(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{209:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return s}));var a=n(3),o=n(7),r=(n(0),n(216)),i={title:"Hooks"},l={unversionedId:"graphql/hooks",id:"graphql/hooks",isDocsHomePage:!1,title:"Hooks",description:"nestjs-query provides the following hooks that allow you to modify incoming requests.",source:"@site/docs/graphql/hooks.mdx",slug:"/graphql/hooks",permalink:"/nestjs-query/docs/graphql/hooks",editUrl:"https://github.com/doug-martin/nestjs-query/edit/master/documentation/docs/graphql/hooks.mdx",version:"current",sidebar:"docs",previous:{title:"Paging",permalink:"/nestjs-query/docs/graphql/paging"},next:{title:"Authorization",permalink:"/nestjs-query/docs/graphql/authorization"}},p=[{value:"@BeforeCreateOne",id:"beforecreateone",children:[{value:"Hook Function",id:"hook-function",children:[]},{value:"Hook Class",id:"hook-class",children:[]}]},{value:"@BeforeCreateMany",id:"beforecreatemany",children:[{value:"Hook Function",id:"hook-function-1",children:[]},{value:"Hook Class",id:"hook-class-1",children:[]}]},{value:"@BeforeUpdateOne",id:"beforeupdateone",children:[{value:"Hook Fnction",id:"hook-fnction",children:[]},{value:"Hook Class",id:"hook-class-2",children:[]}]},{value:"@BeforeUpdateMany",id:"beforeupdatemany",children:[{value:"Hook Function",id:"hook-function-2",children:[]},{value:"Hook Class",id:"hook-class-3",children:[]}]},{value:"Using Hooks In Custom Endpoints",id:"using-hooks-in-custom-endpoints",children:[{value:"Example",id:"example",children:[]}]}],c={toc:p};function s(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"nestjs-query")," provides the following hooks that allow you to modify incoming requests."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"@BeforeFindOne")," - invoked before any ",Object(r.b)("inlineCode",{parentName:"li"},"findOne")," query."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"@BeforeQueryMany")," - invoked before any ",Object(r.b)("inlineCode",{parentName:"li"},"queryMany")," query."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"@BeforeCreateOne")," - invoked before any ",Object(r.b)("inlineCode",{parentName:"li"},"createOne")," mutation."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"@BeforeCreateMany")," - invoked before any ",Object(r.b)("inlineCode",{parentName:"li"},"createMany")," mutation."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"@BeforeUpdateOne")," - invoked before any ",Object(r.b)("inlineCode",{parentName:"li"},"updateOne")," mutation."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"@BeforeUpdateMany")," - invoked before any ",Object(r.b)("inlineCode",{parentName:"li"},"updateMany")," mutation."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"@BeforeDeleteOne")," - invoked before any ",Object(r.b)("inlineCode",{parentName:"li"},"deleteOne")," mutation."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"@BeforeDeleteMany")," - invoked before any ",Object(r.b)("inlineCode",{parentName:"li"},"deleteMany")," mutation.")),Object(r.b)("p",null,"In order to use a hook you only need to decorate your DTO with the corresponding decorator."),Object(r.b)("p",null,"Each hook decorator can be provided one of the following:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"A hook function"),Object(r.b)("li",{parentName:"ul"},"A class that extends ",Object(r.b)("inlineCode",{parentName:"li"},"Hook"),", when using a class you can use DI to access other services just like ",Object(r.b)("inlineCode",{parentName:"li"},"guards"),",\n",Object(r.b)("inlineCode",{parentName:"li"},"interceptors")," or ",Object(r.b)("inlineCode",{parentName:"li"},"pipes"),".")),Object(r.b)("div",{className:"admonition admonition-warning alert alert--danger"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"The graphql context by default only contains the incoming request!"))),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"If you provide a custom ",Object(r.b)("inlineCode",{parentName:"p"},"create")," or ",Object(r.b)("inlineCode",{parentName:"p"},"update")," DTO you can also decorate those classes with corresponding decorators."))),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"All of the examples reference a GqlContext. This was defined for the sake of the example. It is recommended that you\ndefine a custom type that represents the information in the context based on the guards and interceptors used in your\napplication."),Object(r.b)("p",{parentName:"div"},"We have defined our ",Object(r.b)("inlineCode",{parentName:"p"},"GqlContext")," as"),Object(r.b)("pre",{parentName:"div"},Object(r.b)("code",{parentName:"pre",className:"language-ts"},"export type GqlContext = { req: { headers: Record<string, string> } };\n")))),Object(r.b)("h2",{id:"beforecreateone"},"@BeforeCreateOne"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"@BeforeCreateOne")," decorator can be used to modify incoming ",Object(r.b)("inlineCode",{parentName:"p"},"createOne")," mutations with information from the graphql\ncontext."),Object(r.b)("h3",{id:"hook-function"},"Hook Function"),Object(r.b)("p",null,"In this example we set the createdBy field based on the context."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts",metastring:"{7-10}","{7-10}":!0},"import { FilterableField, BeforeCreateOne, CreateOneInputType } from '@nestjs-query/query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { GqlContext } from '../../interfaces';\nimport { getUserName } from '../../helpers';\n\n@ObjectType('TodoItem')\n@BeforeCreateOne((input: CreateOneInputType<TodoItemDTO>, context: GqlContext) => {\n  input.input.createdBy = getUserName(context);\n  return input;\n})\nexport class TodoItemDTO {\n\n /**\n Other fields\n **/\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n\n")),Object(r.b)("h3",{id:"hook-class"},"Hook Class"),Object(r.b)("p",null,"You can also provide a custom ",Object(r.b)("inlineCode",{parentName:"p"},"Hook")," class that can leverage ",Object(r.b)("inlineCode",{parentName:"p"},"nestjs")," dependency injection."),Object(r.b)("p",null,"In this example we create a simple Hook that works with any type that has a ",Object(r.b)("inlineCode",{parentName:"p"},"createdBy")," property."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"import { Injectable } from '@nestjs/common';\nimport { BeforeCreateOneHook, CreateOneInputType,} from '@nestjs-query/query-graphql';\nimport { GqlContext } from './auth/auth.guard';\nimport { AuthService } from './auth/auth.service';\n\ninterface CreatedBy {\n  createdBy: string;\n}\n\n@Injectable()\nexport class CreatedByHook<T extends CreatedBy> implements BeforeCreateOneHook<T, GqlContext> {\n  constructor(readonly authService: AuthService) {}\n\n  async run(instance: CreateOneInputType<T>, context: GqlContext): Promise<CreateOneInputType<T>> {\n    const createdBy = await this.authService.getUserEmail(context.userId);\n    instance.input.createdBy = createdBy;\n    return instance;\n  }\n}\n")),Object(r.b)("p",null,"Now we just provide the hook to the ",Object(r.b)("inlineCode",{parentName:"p"},"BeforeCreateOne")," decorator."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts",metastring:"{6}","{6}":!0},"import { FilterableField, BeforeCreateOne } from '@nestjs-query/query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { CreatedByHook } from '../../hooks';\n\n@ObjectType('TodoItem')\n@BeforeCreateOne(CreatedByHook)\nexport class TodoItemDTO {\n\n /**\n Other fields\n **/\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n\n")),Object(r.b)("h2",{id:"beforecreatemany"},"@BeforeCreateMany"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"@BeforeCreateMany")," decorator can be used to modify incoming ",Object(r.b)("inlineCode",{parentName:"p"},"createMany")," mutations with information from the\ngraphql context."),Object(r.b)("h3",{id:"hook-function-1"},"Hook Function"),Object(r.b)("p",null,"In this example we set the createdBy field on each record based on the context."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts",metastring:"{7-11}","{7-11}":!0},"import { FilterableField, BeforeCreateMany, CreateManyInputType } from '@nestjs-query/query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { GqlContext } from '../../interfaces';\nimport { getUserName } from '../../helpers';\n\n@ObjectType('TodoItem')\n@BeforeCreateMany((input: CreateManyInputType<TodoItemDTO>, context: GqlContext) => {\n  const createdBy = getUserName(context);\n  input.input = input.input.map((c) => ({ ...c, createdBy }));\n  return input;\n})\nexport class TodoItemDTO {\n\n   /**\n   Other fields\n   **/\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n\n")),Object(r.b)("h3",{id:"hook-class-1"},"Hook Class"),Object(r.b)("p",null,"You can also provide a custom ",Object(r.b)("inlineCode",{parentName:"p"},"Hook")," class that can leverage ",Object(r.b)("inlineCode",{parentName:"p"},"nestjs")," dependency injection."),Object(r.b)("p",null,"In this example we create a simple Hook that works with any type that has a ",Object(r.b)("inlineCode",{parentName:"p"},"createdBy")," property."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"import { Injectable } from '@nestjs/common';\nimport { BeforeCreateManyHook, CreateManyInputType,} from '@nestjs-query/query-graphql';\nimport { GqlContext } from './auth/auth.guard';\nimport { AuthService } from './auth/auth.service';\n\ninterface CreatedBy {\n  createdBy: string;\n}\n\n@Injectable()\nexport class CreatedByHook<T extends CreatedBy> implements BeforeCreateManyHook<T, GqlContext> {\n  constructor(readonly authService: AuthService) {}\n\n  async run(instance: CreateManyInputType<T>, context: GqlContext): Promise<CreateManyInputType<T>> {\n    const createdBy = await this.authService.getUserEmail(context.userId);\n    instance.input = instance.input.map((c) => ({ ...c, createdBy }));\n    return instance;\n  }\n}\n")),Object(r.b)("p",null,"Now we just provide the hook to the ",Object(r.b)("inlineCode",{parentName:"p"},"BeforeCreateMany")," decorator."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts",metastring:"{6}","{6}":!0},"import { FilterableField, BeforeCreateMany } from '@nestjs-query/query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { CreatedByHook } from '../../hooks';\n\n@ObjectType('TodoItem')\n@BeforeCreateMany(CreatedByHook)\nexport class TodoItemDTO {\n\n /**\n Other fields\n **/\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n\n")),Object(r.b)("h2",{id:"beforeupdateone"},"@BeforeUpdateOne"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"@BeforeUpdateOne")," decorator can be used to modify incoming ",Object(r.b)("inlineCode",{parentName:"p"},"updateOne")," mutations with information from the graphql\ncontext."),Object(r.b)("h3",{id:"hook-fnction"},"Hook Fnction"),Object(r.b)("p",null,"In this example we set the updatedBy field in the update."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts",metastring:"{7-10}","{7-10}":!0},"import { FilterableField, BeforeUpdateOne, UpdateOneInputType } from '@nestjs-query/query-graphql';\nimport { ObjectType } from '@nestjs/graphql';\nimport { GqlContext } from '../../interfaces';\nimport { getUserName } from '../../helpers';\n\n@ObjectType('TodoItem')\n@BeforeUpdateOne((input: UpdateOneInputType<TodoItemDTO>, context: GqlContext) => {\n  input.update.updatedBy = getUserName(context);\n  return input;\n})\nexport class TodoItemDTO {\n\n  /**\n  Other fields\n  **/\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n\n")),Object(r.b)("h3",{id:"hook-class-2"},"Hook Class"),Object(r.b)("p",null,"You can also provide a custom ",Object(r.b)("inlineCode",{parentName:"p"},"Hook")," class that can leverage ",Object(r.b)("inlineCode",{parentName:"p"},"nestjs")," dependency injection."),Object(r.b)("p",null,"In this example we create a simple Hook that works with any type that has a ",Object(r.b)("inlineCode",{parentName:"p"},"createdBy")," property."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"import { BeforeUpdateOneHook, UpdateOneInputType } from '@nestjs-query/query-graphql';\nimport { Injectable } from '@nestjs/common';\nimport { GqlContext } from './auth/auth.guard';\nimport { AuthService } from './auth/auth.service';\n\ninterface UpdatedBy {\n  updatedBy: string;\n}\n\n@Injectable()\nexport class UpdatedByHook<T extends UpdatedBy> implements BeforeUpdateOneHook<T, GqlContext> {\n  constructor(readonly authService: AuthService) {}\n\n  async run(instance: UpdateOneInputType<T>, context: GqlContext): Promise<UpdateOneInputType<T>> {\n    // eslint-disable-next-line no-param-reassign\n    instance.update.updatedBy = await this.authService.getUserEmail(context.userId);\n    return instance;\n  }\n}\n")),Object(r.b)("p",null,"Now we just provide the hook to the ",Object(r.b)("inlineCode",{parentName:"p"},"BeforeUpdateOne")," decorator."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts",metastring:"{6}","{6}":!0},"import { FilterableField, BeforeUpdateOne } from '@nestjs-query/query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { CreatedByHook } from '../../hooks';\n\n@ObjectType('TodoItem')\n@BeforeUpdateOne(UpdatedByHook)\nexport class TodoItemDTO {\n\n /**\n Other fields\n **/\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n\n")),Object(r.b)("h2",{id:"beforeupdatemany"},"@BeforeUpdateMany"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"@BeforeUpdateMany")," decorator can be used to modify incoming ",Object(r.b)("inlineCode",{parentName:"p"},"updateMany")," mutations with information from the\ngraphql context."),Object(r.b)("h3",{id:"hook-function-2"},"Hook Function"),Object(r.b)("p",null,"In this example we set the updatedBy field in the update."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts",metastring:"{7-10}","{7-10}":!0},"import { FilterableField, BeforeUpdateMany, UpdateManyInputType } from '@nestjs-query/query-graphql';\nimport { ObjectType } from '@nestjs/graphql';\nimport { GqlContext } from '../../interfaces';\nimport { getUserName } from '../../helpers';\n\n@ObjectType('TodoItem')\n@BeforeUpdateMany((input: UpdateManyInputType<TodoItemDTO, TodoItemDTO>, context: GqlContext) => {\n  input.update.updatedBy = getUserName(context);\n  return input;\n})\nexport class TodoItemDTO {\n\n  /**\n  Other fields\n  **/\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n\n")),Object(r.b)("h3",{id:"hook-class-3"},"Hook Class"),Object(r.b)("p",null,"You can also provide a custom ",Object(r.b)("inlineCode",{parentName:"p"},"Hook")," class that can leverage ",Object(r.b)("inlineCode",{parentName:"p"},"nestjs")," dependency injection."),Object(r.b)("p",null,"In this example we create a simple Hook that works with any type that has a ",Object(r.b)("inlineCode",{parentName:"p"},"createdBy")," property."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"import { BeforeUpdateManyHook, UpdateManyInputType } from '@nestjs-query/query-graphql';\nimport { Injectable } from '@nestjs/common';\nimport { GqlContext } from './auth/auth.guard';\nimport { AuthService } from './auth/auth.service';\n\ninterface UpdatedBy {\n  updatedBy: string;\n}\n\n@Injectable()\nexport class UpdatedByHook<T extends UpdatedBy> implements BeforeUpdateManyHook<T, GqlContext> {\n  constructor(readonly authService: AuthService) {}\n\n  async run(instance: UpdateManyInputType<T, T>, context: GqlContext): Promise<UpdateManyInputType<T, T>> {\n    // eslint-disable-next-line no-param-reassign\n    instance.update.updatedBy = await this.authService.getUserEmail(context.userId);\n    return instance;\n  }\n}\n")),Object(r.b)("p",null,"Now we just provide the hook to the ",Object(r.b)("inlineCode",{parentName:"p"},"BeforeUpdateMany")," decorator."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts",metastring:"{6}","{6}":!0},"import { FilterableField, BeforeUpdateMany } from '@nestjs-query/query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { CreatedByHook } from '../../hooks';\n\n@ObjectType('TodoItem')\n@BeforeUpdateMany(UpdatedByHook)\nexport class TodoItemDTO {\n\n /**\n Other fields\n **/\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n\n")),Object(r.b)("h2",{id:"using-hooks-in-custom-endpoints"},"Using Hooks In Custom Endpoints"),Object(r.b)("p",null,"You can also use hooks in custom endpoints by using the ",Object(r.b)("inlineCode",{parentName:"p"},"HookInterceptor")," along with"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"HookArgs")," - Used to apply hooks to any query endpoint."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"MutationHookArgs")," - Used to apply hooks to any ",Object(r.b)("inlineCode",{parentName:"li"},"mutation")," that uses ",Object(r.b)("inlineCode",{parentName:"li"},"MutationArgsType"))),Object(r.b)("h3",{id:"example"},"Example"),Object(r.b)("p",null,"In this example we'll create an endpoint that marks all todo items that are currently not completed as completed."),Object(r.b)("p",null,"To start we'll create our input types."),Object(r.b)("p",null,"There are two types that are created"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"The ",Object(r.b)("inlineCode",{parentName:"li"},"UpdateManyTodoItemsInput")," which extends the ",Object(r.b)("inlineCode",{parentName:"li"},"UpdateManyInputType")," this exposes an ",Object(r.b)("inlineCode",{parentName:"li"},"update")," and ",Object(r.b)("inlineCode",{parentName:"li"},"filter")," field just like the ",Object(r.b)("inlineCode",{parentName:"li"},"updateMany")," endpoints that are auto generated."),Object(r.b)("li",{parentName:"ul"},"The ",Object(r.b)("inlineCode",{parentName:"li"},"UpdateManyTodoItemsArgs")," which extends ",Object(r.b)("inlineCode",{parentName:"li"},"MutationArgsType"),", this provides a uniform interface for all mutations\nensuring that the argument provided to the mutation is named ",Object(r.b)("inlineCode",{parentName:"li"},"input"),".")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/types.ts"',title:'"todo-item/types.ts"'},"import { MutationArgsType, UpdateManyInputType } from '@nestjs-query/query-graphql';\nimport { ArgsType, InputType } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemUpdateDTO } from './dto/todo-item-update.dto';\n\n// create the base input type\n@InputType()\nexport class UpdateManyTodoItemsInput extends UpdateManyInputType(TodoItemDTO, TodoItemUpdateDTO) {}\n\n// Wrap the input in the MutationArgsType to provide a uniform format for all mutations\n// The `MutationArgsType` is a thin wrapper that names the args as input\n@ArgsType()\nexport class UpdateManyTodoItemsArgs extends MutationArgsType(UpdateManyTodoItemsInput) {}\n")),Object(r.b)("p",null,"Now we can use our new types in the resolver."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.resolver.ts" {14,15}',title:'"todo-item/todo-item.resolver.ts"',"{14,15}":!0},"import { InjectQueryService, mergeFilter, QueryService, UpdateManyResponse } from '@nestjs-query/core';\nimport { HookTypes, HookInterceptor, MutationHookArgs, UpdateManyResponseType } from '@nestjs-query/query-graphql';\nimport { UseInterceptors } from '@nestjs/common';\nimport { Mutation, Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\nimport { UpdateManyTodoItemsArgs } from './types';\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver {\n  constructor(@InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemDTO>) {}\n\n  @Mutation(() => UpdateManyResponseType())\n  @UseInterceptors(HookInterceptor(HookTypes.BEFORE_UPDATE_MANY, TodoItemDTO))\n  markTodoItemsAsCompleted(@MutationHookArgs() { input }: UpdateManyTodoItemsArgs): Promise<UpdateManyResponse> {\n    return this.service.updateMany(\n      { ...input.update, completed: false },\n      mergeFilter(input.filter, { completed: { is: false } }),\n    );\n  }\n}\n")),Object(r.b)("p",null,"The first thing to notice is the"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"@UseInterceptors(HookInterceptor(HookTypes.BEFORE_UPDATE_MANY, TodoItemDTO))\n")),Object(r.b)("p",null,"This interceptor adds the correct hook to the ",Object(r.b)("inlineCode",{parentName:"p"},"context")," to be used by the param decorator."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"In this example we bind the ",Object(r.b)("inlineCode",{parentName:"p"},"BEFORE_UPDATE_MANY")," hook, you can use any of the hooks available to bind to the correct\none when ",Object(r.b)("inlineCode",{parentName:"p"},"creating"),", ",Object(r.b)("inlineCode",{parentName:"p"},"updating"),", or ",Object(r.b)("inlineCode",{parentName:"p"},"deleting")," records."))),Object(r.b)("p",null,"The next piece is the"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"@MutationHookArgs() { input }: UpdateManyTodoItemsArgs\n")),Object(r.b)("p",null,"By using the ",Object(r.b)("inlineCode",{parentName:"p"},"MutationHookArgs")," decorator we ensure that the hook is applied to the arguments adding any additional\nfields to the update."),Object(r.b)("p",null,"Finally we invoke the service ",Object(r.b)("inlineCode",{parentName:"p"},"updateMany")," with a filter that ensures we only update ",Object(r.b)("inlineCode",{parentName:"p"},"TodoItems")," that are completed,\nand add an setting ",Object(r.b)("inlineCode",{parentName:"p"},"completed")," to true to the update"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"return this.service.updateMany(\n  { ...input.update, completed: false },\n  mergeFilter(input.filter, { completed: { is: false } }),\n);\n")))}s.isMDXComponent=!0},216:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),s=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(n),b=a,u=d["".concat(i,".").concat(b)]||d[b]||m[b]||r;return n?o.a.createElement(u,l(l({ref:t},c),{},{components:n})):o.a.createElement(u,l({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=b;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);