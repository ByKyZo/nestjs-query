(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{188:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return d}));var a=n(1),r=(n(0),n(223));const i={title:"Usage"},o={id:"sequelize/usage",title:"Usage",description:"All examples assume the following [model definition](https://github.com/RobinBuschmann/sequelize-typescript#model-definition).",source:"@site/docs/sequelize/usage.md",permalink:"/nestjs-query/docs/sequelize/usage",editUrl:"https://github.com/doug-martin/nestjs-query/edit/master/documentation/docs/sequelize/usage.md"},l=[{value:"Creating a Service",id:"creating-a-service",children:[{value:"Module",id:"module",children:[]},{value:"Querying",id:"querying",children:[]},{value:"Filtering",id:"filtering",children:[]},{value:"Sorting",id:"sorting",children:[]},{value:"Paging",id:"paging",children:[]},{value:"Find By Id",id:"find-by-id",children:[]},{value:"Get By Id",id:"get-by-id",children:[]}]},{value:"Creating",id:"creating",children:[{value:"Create One",id:"create-one",children:[]},{value:"Create Many",id:"create-many",children:[]}]},{value:"Updating",id:"updating",children:[{value:"Update One",id:"update-one",children:[]},{value:"Update Many",id:"update-many",children:[]}]},{value:"Deleting",id:"deleting",children:[{value:"Delete One",id:"delete-one",children:[]},{value:"Delete Many",id:"delete-many",children:[]}]},{value:"Foreign Keys",id:"foreign-keys",children:[{value:"Example",id:"example-12",children:[]}]},{value:"Relations",id:"relations",children:[{value:"Example",id:"example-13",children:[]}]},{value:"Model Serialization",id:"model-serialization",children:[]},{value:"Custom Service",id:"custom-service",children:[{value:"Complete Example",id:"complete-example",children:[]}]}],c={rightToc:l};function d({components:e,...t}){return Object(r.b)("wrapper",Object(a.a)({},c,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"All examples assume the following ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/RobinBuschmann/sequelize-typescript#model-definition"}),"model definition"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import {\n  Table,\n  Column,\n  Model,\n  AllowNull,\n  CreatedAt,\n  UpdatedAt,\n  PrimaryKey,\n  AutoIncrement,\n} from 'sequelize-typescript';\n\n@Table\nexport class TodoItemEntity extends Model<TodoItemEntity> {\n  @PrimaryKey\n  @AutoIncrement\n  @Column\n  id!: number;\n\n  @Column\n  title!: string;\n\n  @AllowNull\n  @Column\n  description?: string;\n\n  @Column\n  completed!: boolean;\n\n  @CreatedAt\n  created!: Date;\n\n  @UpdatedAt\n  updated!: Date;\n}\n\n\n")),Object(r.b)("h2",{id:"creating-a-service"},"Creating a Service"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"@nestjs-query/query-sequelize")," package includes a ",Object(r.b)("inlineCode",{parentName:"p"},"@InjectSequelizeQueryService")," decorator that creates your ",Object(r.b)("inlineCode",{parentName:"p"},"SequelizeQueryService")," automatically."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { QueryService } from '@nestjs-query/core';\nimport { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { InjectSequelizeQueryService } from '@nestjs-query/query-sequelize';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO) {\n  constructor(\n    @InjectSequelizeQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")),Object(r.b)("h3",{id:"module"},"Module"),Object(r.b)("p",null,"In order to use the ",Object(r.b)("inlineCode",{parentName:"p"},"@InjectSequelizeQueryService")," you will need to use the ",Object(r.b)("inlineCode",{parentName:"p"},"NestjsQuerySequelizeModule"),"."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"NestjsQuerySequelizeModule")," wraps the ",Object(r.b)("inlineCode",{parentName:"p"},"@nestjs/sequelize")," module and adds the additional decorators."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { NestjsQuerySequelizeModule } from '@nestjs-query/query-sequelize';\nimport { Module } from '@nestjs/common';\nimport { TodoItemEntity } from './todo-item.entity';\nimport { TodoItemResolver } from './todo-item.resolver';\n\n@Module({\n  providers: [TodoItemResolver],\n  imports: [NestjsQuerySequelizeModule.forFeature([TodoItemEntity])],\n})\nexport class TodoItemModule {}\n\n")),Object(r.b)("h3",{id:"querying"},"Querying"),Object(r.b)("p",null,"To query for records from your service you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"query")," method which will return a ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," of an array of entities. To read more about querying take a look at the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../concepts/queries"}),"Queries Doc"),"."),Object(r.b)("h4",{id:"example"},"Example"),Object(r.b)("p",null,"Get all records"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const records = await this.service.query({});\n")),Object(r.b)("h3",{id:"filtering"},"Filtering"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"filter")," option is translated to a ",Object(r.b)("inlineCode",{parentName:"p"},"WHERE")," clause in ",Object(r.b)("inlineCode",{parentName:"p"},"sequelize"),"."),Object(r.b)("h4",{id:"example-1"},"Example"),Object(r.b)("p",null,"To find all completed ",Object(r.b)("inlineCode",{parentName:"p"},"TodoItems")," by use can use the ",Object(r.b)("inlineCode",{parentName:"p"},"is")," operator."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const records = await this.service.query({\n   filter : {\n     completed: { is: true },\n   },\n});\n")),Object(r.b)("h3",{id:"sorting"},"Sorting"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"sorting")," option is translated to a ",Object(r.b)("inlineCode",{parentName:"p"},"ORDER BY"),"."),Object(r.b)("h4",{id:"example-2"},"Example"),Object(r.b)("p",null,"Sorting records by ",Object(r.b)("inlineCode",{parentName:"p"},"completed")," and ",Object(r.b)("inlineCode",{parentName:"p"},"title"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const records = await this.service.query({\n  sorting: [\n    {field: 'completed', direction: SortDirection.ASC},\n    {field: 'title', direction: SortDirection.DESC},\n  ],\n});\n")),Object(r.b)("h3",{id:"paging"},"Paging"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"paging")," option is translated to ",Object(r.b)("inlineCode",{parentName:"p"},"LIMIT")," and ",Object(r.b)("inlineCode",{parentName:"p"},"OFFSET"),"."),Object(r.b)("h4",{id:"example-3"},"Example"),Object(r.b)("p",null,"Skip the first 20 records and return the next 10."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const records = await this.service.query({\n  paging: {limit: 10, offset: 20},\n});\n")),Object(r.b)("h3",{id:"find-by-id"},"Find By Id"),Object(r.b)("p",null,"To find a single record you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"findById")," method."),Object(r.b)("h4",{id:"example-4"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const records = await this.service.findById(1);\n")),Object(r.b)("h3",{id:"get-by-id"},"Get By Id"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"getById")," method is the same as the ",Object(r.b)("inlineCode",{parentName:"p"},"findById")," with one key difference, it will throw an exception if the record is not found."),Object(r.b)("h4",{id:"example-5"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"try {\n  const records = await this.service.getById(1);\n} catch (e) {\n  console.error('Unable to get record with id = 1');\n}\n")),Object(r.b)("h2",{id:"creating"},"Creating"),Object(r.b)("h3",{id:"create-one"},"Create One"),Object(r.b)("p",null,"To create a single record use the ",Object(r.b)("inlineCode",{parentName:"p"},"createOne")," method."),Object(r.b)("h4",{id:"example-6"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const createdRecord = await this.service.createOne({\n  title: 'Foo',\n  completed: false,\n});\n")),Object(r.b)("h3",{id:"create-many"},"Create Many"),Object(r.b)("p",null,"To create multiple records use the ",Object(r.b)("inlineCode",{parentName:"p"},"createMany")," method."),Object(r.b)("h4",{id:"example-7"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const createdRecords = await this.service.createMany([\n  { title: 'Foo', completed: false },\n  { title: 'Bar', completed: true },\n]);\n")),Object(r.b)("h2",{id:"updating"},"Updating"),Object(r.b)("h3",{id:"update-one"},"Update One"),Object(r.b)("p",null,"To update a single record use the ",Object(r.b)("inlineCode",{parentName:"p"},"updateOne")," method."),Object(r.b)("h4",{id:"example-8"},"Example"),Object(r.b)("p",null,"Updates the record with an id equal to 1 to completed."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const updatedRecord = await this.service.updateOne(1, { completed: true });\n")),Object(r.b)("h3",{id:"update-many"},"Update Many"),Object(r.b)("p",null,"To update multiple records use the ",Object(r.b)("inlineCode",{parentName:"p"},"updateMany")," method."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"NOTE")," This method returns a ",Object(r.b)("inlineCode",{parentName:"p"},"UpdateManyResponse")," which contains the updated record count."),Object(r.b)("h4",{id:"example-9"},"Example"),Object(r.b)("p",null,"Updates all ",Object(r.b)("inlineCode",{parentName:"p"},"TodoItemEntities")," to completed if their title ends in ",Object(r.b)("inlineCode",{parentName:"p"},"Bar")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const { updatedCount } = await this.service.updateMany(\n  {completed: true}, // update\n  {completed: {is: false}, title: {like: '%Bar'}} // filter\n);\n")),Object(r.b)("h2",{id:"deleting"},"Deleting"),Object(r.b)("h3",{id:"delete-one"},"Delete One"),Object(r.b)("p",null,"To delete a single record use the ",Object(r.b)("inlineCode",{parentName:"p"},"deleteOne")," method."),Object(r.b)("h4",{id:"example-10"},"Example"),Object(r.b)("p",null,"Delete the record with an id equal to 1."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const deletedRecord = await this.service.deleteOne(1);\n")),Object(r.b)("h3",{id:"delete-many"},"Delete Many"),Object(r.b)("p",null,"To delete multiple records use the ",Object(r.b)("inlineCode",{parentName:"p"},"deleteMany")," method."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"NOTE")," This method returns a ",Object(r.b)("inlineCode",{parentName:"p"},"DeleteManyResponse")," which contains the deleted record count."),Object(r.b)("h4",{id:"example-11"},"Example"),Object(r.b)("p",null,"Delete all ",Object(r.b)("inlineCode",{parentName:"p"},"TodoItemEntities")," older than ",Object(r.b)("inlineCode",{parentName:"p"},"Jan 1, 2019"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const { deletedCount } = await this.service.deleteMany(\n  { created: { lte: new Date('2019-1-1') } } // filter\n);\n")),Object(r.b)("h2",{id:"foreign-keys"},"Foreign Keys"),Object(r.b)("p",null,"It is a common use case to include a foreign key from your entity in your DTO."),Object(r.b)("p",null,"To do this you should add the foreign key to your entity as well as your DTO."),Object(r.b)("h3",{id:"example-12"},"Example"),Object(r.b)("p",null,"Assume TodoItems can have SubTasks we would set up our SubTaskEntity using the following"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import {\n  Table,\n  AllowNull,\n  Column,\n  ForeignKey,\n  BelongsTo,\n  CreatedAt,\n  UpdatedAt,\n  Model,\n  AutoIncrement,\n  PrimaryKey,\n} from 'sequelize-typescript';\nimport { TodoItemEntity } from '../todo-item/entity/todo-item.entity';\n\n@Table({})\nexport class SubTaskEntity extends Model<SubTaskEntity> {\n  @PrimaryKey\n  @AutoIncrement\n  @Column\n  id!: number;\n\n  @Column\n  title!: string;\n\n  @AllowNull\n  @Column\n  description?: string;\n\n  @Column\n  completed!: boolean;\n\n  @Column\n  @ForeignKey(() => TodoItemEntity)\n  todoItemId!: number;\n\n  @BelongsTo(() => TodoItemEntity)\n  todoItem!: TodoItemEntity;\n\n  @CreatedAt\n  created!: Date;\n\n  @UpdatedAt\n  updated!: Date;\n}\n\n")),Object(r.b)("p",null,"Then we could add the ",Object(r.b)("inlineCode",{parentName:"p"},"todoItemId")," to the SubTaskDTO."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { FilterableField } from '@nestjs-query/query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\n\n@ObjectType('SubTask')\nexport class SubTaskDTO {\n  @FilterableField(() => ID)\n  id!: number;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField({ nullable: true })\n  description?: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n\n  // expose the todoItemId as a filterable field.\n  @FilterableField()\n  todoItemId!: string;\n}\n")),Object(r.b)("h2",{id:"relations"},"Relations"),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This section only applies when you combine your DTO and entity"))),Object(r.b)("p",null,"When your DTO and entity are the same class and you have relations defined in ",Object(r.b)("inlineCode",{parentName:"p"},"sequelize")," you should not decorate your relations with ",Object(r.b)("inlineCode",{parentName:"p"},"@Field")," or ",Object(r.b)("inlineCode",{parentName:"p"},"@FilterableField"),". "),Object(r.b)("p",null,"Instead specify the relations you want to expose in your resolver."),Object(r.b)("h3",{id:"example-13"},"Example"),Object(r.b)("p",null,"Assume you have the following subtask definition."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import {\n  Table,\n  AllowNull,\n  Column,\n  ForeignKey,\n  BelongsTo,\n  CreatedAt,\n  UpdatedAt,\n  Model,\n  AutoIncrement,\n  PrimaryKey,\n} from 'sequelize-typescript';\nimport { FilterableField } from '@nestjs-query/query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { TodoItemEntity } from '../todo-item/entity/todo-item.entity';\n\n@ObjectType('SubTask')\n@Table\nexport class SubTaskEntity extends Model<SubTaskEntity> {\n  @FilterableField(() => ID)\n  @PrimaryKey\n  @AutoIncrement\n  @Column\n  id!: number;\n\n  @FilterableField()\n  @Column\n  title!: string;\n  \n  @FilterableField({ nullable: true })\n  @AllowNull\n  @Column\n  description?: string;\n  \n  @FilterableField()\n  @Column\n  completed!: boolean;\n  \n  @FilterableField()\n  @Column\n  @ForeignKey(() => TodoItemEntity)\n  todoItemId!: number;\n\n  @BelongsTo(() => TodoItemEntity)\n  todoItem!: TodoItemEntity;\n  \n  @FilterableField(() => GraphQLISODateTime)\n  @CreatedAt\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  @UpdatedAt\n  updated!: Date;\n}\n")),Object(r.b)("p",null,"Notice how the ",Object(r.b)("inlineCode",{parentName:"p"},"todoItem")," is not decorated with a field decorator. "),Object(r.b)("p",null,"Instead, add it to your resolver."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { QueryService } from '@nestjs-query/core';\nimport { CRUDResolver } from '@nestjs-query/query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { InjectSequelizeQueryService } from '@nestjs-query/query-sequelize';\nimport { TodoItemEntity } from '../todo-item/todo-item.entity';\nimport { SubTaskEntity } from './sub-task.entity';\n\n@Resolver(() => SubTaskEntity)\nexport class SubTaskResolver extends CRUDResolver(SubTaskEntity, {\n  relations: {\n    one: { todoItem: { DTO: TodoItemEntity, disableRemove: true } },\n  },\n}) {\n  constructor(@InjectSequelizeQueryService(SubTaskEntity) readonly service: QueryService<SubTaskEntity>) {\n    super(service);\n  }\n}\n\n")),Object(r.b)("h2",{id:"model-serialization"},"Model Serialization"),Object(r.b)("p",null,"Using ",Object(r.b)("inlineCode",{parentName:"p"},"class-transformer")," is a popular libarary used in ",Object(r.b)("inlineCode",{parentName:"p"},"nestjs"),", unfortunately ",Object(r.b)("inlineCode",{parentName:"p"},"class-transformer")," does not place nicely with ",Object(r.b)("inlineCode",{parentName:"p"},"sequelize")," models."),Object(r.b)("p",null,"For most use cases ",Object(r.b)("inlineCode",{parentName:"p"},"nestjs-query")," will take care of the serialization for you through ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../concepts/assemblers"}),"assemblers"),". If you find yourself in a situation where you want to use ",Object(r.b)("inlineCode",{parentName:"p"},"class-transformer")," with a model you should use the following patterns."),Object(r.b)("p",null,"To convert your DTO into a model you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"build")," method on the model."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"TodoItemEntity.build(todoItemDTO);\n")),Object(r.b)("p",null,"When converting your entity into a DTO you can use the following."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const dto = plainToClass(TodoItemDTO, todoItemEntity.get({ plain: true }));\n")),Object(r.b)("h2",{id:"custom-service"},"Custom Service"),Object(r.b)("p",null,"If you want to add custom methods to your service you can extend the ",Object(r.b)("inlineCode",{parentName:"p"},"SequelizeQueryService")," directly."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { QueryService } from '@nestjs-query/core';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { SequelizeQueryService } from '@nestjs-query/query-sequelize';\nimport { TodoItemEntity } from './entity/todo-item.entity';\n\n@QueryService(TodoItemEntity)\nexport class TodoItemService extends SequelizeQueryService<TodoItemEntity> {\n  constructor(@InjectModel(TodoItemEntity) model: typeof TodoItemEntity) {\n    super(model);\n  }\n\n  async markAllAsCompleted(): Promise<number> {\n    const entities = await this.query({ filter: { completed: { is: true } } });\n\n    const { updatedCount } = await this.updateMany(\n      { completed: true }, // update\n      { id: { in: entities.map((e) => e.id) } }, // filter\n    );\n    // do some other business logic\n    return updatedCount;\n  }\n}\n\n")),Object(r.b)("h3",{id:"complete-example"},"Complete Example"),Object(r.b)("p",null,"To see a complete example checkout ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/doug-martin/nestjs-query/tree/master/examples/nest-graphql-sequelize"}),"https://github.com/doug-martin/nestjs-query/tree/master/examples/nest-graphql-sequelize")))}d.isMDXComponent=!0},223:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=r.a.createContext({}),s=function(e){var t=r.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},b=function(e){var t=s(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),b=s(n),u=a,m=b["".concat(o,".").concat(u)]||b[u]||p[u]||i;return n?r.a.createElement(m,l({ref:t},d,{components:n})):r.a.createElement(m,l({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);