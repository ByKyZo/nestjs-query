(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{146:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),i=(n(0),n(189)),l={title:"Query Helpers"},o={unversionedId:"utilities/query-helpers",id:"utilities/query-helpers",isDocsHomePage:!1,title:"Query Helpers",description:"The @nestjs-query/core package provides a number of helper functions to transform or apply queries to a list of items.",source:"@site/docs/utilities/query-helpers.mdx",slug:"/utilities/query-helpers",permalink:"/nestjs-query/docs/utilities/query-helpers",editUrl:"https://github.com/doug-martin/nestjs-query/edit/master/documentation/docs/utilities/query-helpers.mdx",version:"current",sidebar:"docs",previous:{title:"Federation",permalink:"/nestjs-query/docs/graphql/federation"},next:{title:"v0.5.x to v0.6.x",permalink:"/nestjs-query/docs/migration-guides/v0.5.x-to-v0.6.x"}},s=[{value:"applyFilter",id:"applyfilter",children:[{value:"Arguments",id:"arguments",children:[]},{value:"Example",id:"example",children:[]}]},{value:"applySort",id:"applysort",children:[{value:"Arguments",id:"arguments-1",children:[]},{value:"Example",id:"example-1",children:[]}]},{value:"applyPaging",id:"applypaging",children:[{value:"Arguments",id:"arguments-2",children:[]},{value:"Example",id:"example-2",children:[]}]},{value:"applyQuery",id:"applyquery",children:[{value:"Arguments",id:"arguments-3",children:[]},{value:"Example",id:"example-3",children:[]}]},{value:"transformFilter",id:"transformfilter",children:[{value:"Arguments",id:"arguments-4",children:[]},{value:"Example",id:"example-4",children:[]}]},{value:"transformSort",id:"transformsort",children:[{value:"Arguments",id:"arguments-5",children:[]},{value:"Example",id:"example-5",children:[]}]},{value:"transformQuery",id:"transformquery",children:[{value:"Arguments",id:"arguments-6",children:[]},{value:"Example",id:"example-6",children:[]}]}],c={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"@nestjs-query/core")," package provides a number of helper functions to transform or apply queries to a list of items."),Object(i.b)("p",null,"An example use case for these helpers would be to write a ",Object(i.b)("inlineCode",{parentName:"p"},"QueryService")," that wraps a store that does not support the\nquery options natively (e.g. An in memory collection of objects such as a static array of objects)."),Object(i.b)("p",null,"All examples will be based on the following DTO definition."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"interface TestDTO {\n  first?: string | null;\n\n  last?: string | null;\n\n  age?: number | null;\n\n  isVerified?: boolean | null;\n\n  created?: Date | null;\n}\n")),Object(i.b)("h2",{id:"applyfilter"},"applyFilter"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"applyFilter")," helper applies a ",Object(i.b)("inlineCode",{parentName:"p"},"Filter")," to a single object or an array of objects."),Object(i.b)("h3",{id:"arguments"},"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dto: DTO|DTO[]"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"If a single object a function that will test the dto against the filter, returning ",Object(i.b)("inlineCode",{parentName:"li"},"true")," when if it matches the\nfilter."),Object(i.b)("li",{parentName:"ul"},"If an array of objects is provided the array will be filtered returning a new array with all elements that match\nthe filter."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filter: Filter<DTO>")," - The filter to check the object","[s]"," against. See ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/nestjs-query/docs/concepts/queries#filtering"}),Object(i.b)("inlineCode",{parentName:"a"},"Filtering")))),Object(i.b)("h3",{id:"example"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { applyFilter } from `@nestjs-query/core`;\n\nconst dtos: TestDTO[] = [\n  {first: 'Bob', last: 'Yukon'}\n  {first: 'Alice', last: 'Yukon'}\n  {first: 'Sally', last: 'Yukon'}\n  {first: 'Zane', last: 'Yukon'}\n]\nconst filtered = applyFilter(dtos, {first: {in: ['Bob', 'Sally']})\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const dto: TestDTO = {first: 'Bob', last: 'Yukon'};\napplyFilter<TestDTO>(dto, {first: {in: ['Bob', 'Sally']}) // true\napplyFilter<TestDTO>(dto, {first: {eq: ['Alice', 'Zane']}) // false\n")),Object(i.b)("h2",{id:"applysort"},"applySort"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"applySort")," will sort an array of dtos."),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Because ",Object(i.b)("inlineCode",{parentName:"p"},"applySort")," uses the native ",Object(i.b)("inlineCode",{parentName:"p"},"Array#sort")," method it may not exactly match the ordering you would expect from a\ndatabase."))),Object(i.b)("div",{className:"admonition admonition-warning alert alert--danger"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"warning")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"It is expected that your data types all match. For example if you have a number field that also has some numbers\nrepresented as strings the applySort method may not work as expected."))),Object(i.b)("h3",{id:"arguments-1"},"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dto: DTO[]")," - The array of DTOs to sort."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"sortFields: SortField<DTO>[]")," - The sorting criteria. See ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/nestjs-query/docs/concepts/queries#sorting"}),Object(i.b)("inlineCode",{parentName:"a"},"Sorting")))),Object(i.b)("h3",{id:"example-1"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { applySort, SortDirection, SortNulls } from `@nestjs-query/core`;\n\nconst dtos: TestDTO[] = [\n  {first: 'Bob', last: 'Yukon'}\n  {first: 'Alice', last: 'Yukon'}\n  {first: null, last: 'Yukon'}\n  {first: 'Sally', last: 'Yukon'}\n  {last: 'Yukon'}\n  {first: 'Zane', last: 'Yukon'}\n]\nconst sorted = applySort(dtos, [\n   { field: 'first', direction: SortDirection.DESC, nulls: SortNulls.NULLS_LAST },\n])\n")),Object(i.b)("p",null,"The resulting sorted array would be."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"[\n  {first: 'Zane', last: 'Yukon'}\n  {first: 'Sally', last: 'Yukon'}\n  {first: 'Bob', last: 'Yukon'}\n  {first: 'Alice', last: 'Yukon'}\n  {first: null, last: 'Yukon'}\n  {last: 'Yukon'}\n]\n")),Object(i.b)("h2",{id:"applypaging"},"applyPaging"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"applyPaging")," method will apply a ",Object(i.b)("inlineCode",{parentName:"p"},"limit")," and/or ",Object(i.b)("inlineCode",{parentName:"p"},"offset")," to an array of dtos."),Object(i.b)("h3",{id:"arguments-2"},"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dto: DTO[]")," - The array of DTOs to page."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"paging: Paging")," - The paging arguments to apply. See ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/nestjs-query/docs/concepts/queries#paging"}),Object(i.b)("inlineCode",{parentName:"a"},"Paging")))),Object(i.b)("h3",{id:"example-2"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { applyPaging } from `@nestjs-query/core`;\nconst dtos: TestDTO[] = [\n  {first: 'Bob', last: 'Yukon'}\n  {first: 'Alice', last: 'Yukon'}\n  {first: 'Sally', last: 'Yukon'}\n  {first: 'Zane', last: 'Yukon'}\n]\nconst paged = applyPaging(dtos, {offset: 1, limit: 2})\n")),Object(i.b)("p",null,"The resulting paged dtos would be."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"[\n  {first: 'Alice', last: 'Yukon'}\n  {first: 'Sally', last: 'Yukon'}\n]\n")),Object(i.b)("h2",{id:"applyquery"},"applyQuery"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"applyQuery")," uses the ",Object(i.b)("inlineCode",{parentName:"p"},"applyFilter"),", ",Object(i.b)("inlineCode",{parentName:"p"},"applySorting"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"applyPaging")," methods to apply a ",Object(i.b)("inlineCode",{parentName:"p"},"Query")," to an array of\nDTOs."),Object(i.b)("h3",{id:"arguments-3"},"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dto: DTO[]")," - The array of DTOs to page."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"query: Query<DTO>")," - The query to apply to the array of dtos. See ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/nestjs-query/docs/concepts/queries"}),Object(i.b)("inlineCode",{parentName:"a"},"Queries")))),Object(i.b)("h3",{id:"example-3"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { applyQuery, SortDirection } from `@nestjs-query/core`;\n\nconst dtos: TestDTO[] = [\n  {first: 'Bob', last: 'Yukon', isVerified: true}\n  {first: 'Alice', last: 'Yukon', isVerified: false}\n  {first: 'Sally', last: 'Yukon', isVerified: true}\n  {first: 'Zane', last: 'Yukon', isVerified: true}\n]\nconst queryResult = applyQuery(dtos, {\n  filter: { isVerified: { is: true } },\n  sorting: [{ field: 'first', direction: SortDirection.DESC }],\n  paging: { offset: 1, limit: 2 }\n})\n")),Object(i.b)("p",null,"The resulting array of dtos would be."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"[\n  {first: 'Sally', last: 'Yukon', isVerified: true}\n  {first: 'Bob', last: 'Yukon', isVerified: true}\n]\n")),Object(i.b)("h2",{id:"transformfilter"},"transformFilter"),Object(i.b)("p",null,"The transformFilter is used to remap fields in a ",Object(i.b)("inlineCode",{parentName:"p"},"Filter"),". This method is commonly used when defining a custom\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/nestjs-query/docs/concepts/assemblers"}),"Assembler"),"."),Object(i.b)("h3",{id:"arguments-4"},"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filter: Filter<From>")," - The filter you want to transform."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"fieldMap: QueryFieldMap<From, To>")," - A map of fields where the key is a key in the From type, and the value is a\nkey in the to type.")),Object(i.b)("h3",{id:"example-4"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { transformFilter, QueryFieldMap, Filter } from `@nestjs-query/core`;\n\nclass TestEntity {\n  firstName!: string;\n\n  lastName!: string;\n}\n\nconst fieldMap: QueryFieldMap<TestDTO, TestEntity> = {\n  first: 'firstName',\n  last: 'lastName',\n};\n\nconst dtoFilter: Filter<TestDTO> = {\n  first: { eq: 'foo' },\n  last: { neq: 'bar' },\n};\n\nconst transformed = transformFilter(dtoFilter, fieldMap);\n")),Object(i.b)("p",null,"The new filter would be"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"{\n  firstName: { eq: 'foo' },\n  lastName: { neq: 'bar' },\n}\n")),Object(i.b)("h2",{id:"transformsort"},"transformSort"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"transformSort")," is used to remap fields in an array of  ",Object(i.b)("inlineCode",{parentName:"p"},"SortField<DTO>[]"),". This method is commonly used when\ndefining a custom ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/nestjs-query/docs/concepts/assemblers"}),"Assembler"),"."),Object(i.b)("h3",{id:"arguments-5"},"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"sortFields: SortField<From>[]")," - The array of sorting criteria to transform."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"fieldMap: QueryFieldMap<From, To>")," - A map of fields where the key is a key in the From type, and the value is a key in the to type.")),Object(i.b)("h3",{id:"example-5"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { transformSort, QueryFieldMap, SortField, SortDirection } from `@nestjs-query/core`;\n\nclass TestEntity {\n  firstName!: string;\n\n  lastName!: string;\n}\n\nconst fieldMap: QueryFieldMap<TestDTO, TestEntity> = {\n  first: 'firstName',\n  last: 'lastName',\n};\nconst dtoSort: SortField<TestDTO>[] = [\n  { field: 'first', direction: SortDirection.DESC },\n  { field: 'last', direction: SortDirection.ASC },\n];\n\nconst transformed =  transformSort(dtoSort, fieldMap);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"[\n  { field: 'firstName', direction: SortDirection.DESC },\n  { field: 'lastName', direction: SortDirection.ASC },\n]\n")),Object(i.b)("h2",{id:"transformquery"},"transformQuery"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"transformQuery")," method uses the ",Object(i.b)("inlineCode",{parentName:"p"},"transformFilter")," and ",Object(i.b)("inlineCode",{parentName:"p"},"transformSort")," methods to remap a ",Object(i.b)("inlineCode",{parentName:"p"},"Query"),". This method is\ncommonly used when defining a custom ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/nestjs-query/docs/concepts/assemblers"}),"Assembler"),"."),Object(i.b)("h3",{id:"arguments-6"},"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"sortFields: Query<From>")," - The query to transform."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"fieldMap: QueryFieldMap<From, To>")," - A map of fields where the key is a key in the From type, and the value is a key in the to type.")),Object(i.b)("h3",{id:"example-6"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { transformQuery, QueryFieldMap, Query, SortDirection } from `@nestjs-query/core`;\n\nclass TestEntity {\n  firstName!: string;\n\n  lastName!: string;\n}\n\nconst fieldMap: QueryFieldMap<TestDTO, TestEntity> = {\n  first: 'firstName',\n  last: 'lastName',\n};\nconst dtoQuery: Query<TestDTO> = {\n  filter: { first: { eq: 'foo' }, last: { neq: 'bar' } }\n  sorting: [\n    { field: 'first', direction: SortDirection.DESC },\n    { field: 'last', direction: SortDirection.ASC },\n  ]\n};\n\nconst transformed =  transformQuery(dtoQuery, fieldMap);\n")),Object(i.b)("p",null,"The resulting query would be."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"{\n  filter: { firstName: { eq: 'foo' }, lastName: { neq: 'bar' } }\n  sorting: [\n    { field: 'firstName', direction: SortDirection.DESC },\n    { field: 'lastName', direction: SortDirection.ASC },\n  ]\n}\n")))}p.isMDXComponent=!0},189:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(n),m=a,d=b["".concat(l,".").concat(m)]||b[m]||u[m]||i;return n?r.a.createElement(d,o(o({ref:t},c),{},{components:n})):r.a.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);